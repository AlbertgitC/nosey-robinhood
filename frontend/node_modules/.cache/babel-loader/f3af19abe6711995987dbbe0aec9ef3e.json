{"ast":null,"code":"'use strict'; //\n// Iterator that skips elements while the predicate returns true.\n//\n\nvar SkipWhileIterator = function (iterator, predicate) {\n  var self = this;\n  self._skipped = false;\n  self._iterator = iterator;\n  self._predicate = predicate;\n};\n\nmodule.exports = SkipWhileIterator;\n\nSkipWhileIterator.prototype.moveNext = function () {\n  var self = this;\n\n  for (;;) {\n    if (!self._iterator.moveNext()) {\n      return false;\n    }\n\n    if (self._skipped) {\n      // Already skipped.\n      return true;\n    } // Skipping until predict returns false.\n\n\n    if (!self._predicate(self._iterator.getCurrent())) {\n      self._skipped = true;\n      return true;\n    }\n  }\n};\n\nSkipWhileIterator.prototype.getCurrent = function () {\n  var self = this;\n  return self._iterator.getCurrent();\n};","map":null,"metadata":{},"sourceType":"script"}