{"ast":null,"code":"// This file has been modified from it's original form.\nmodule.exports = function (url) {\n  // Variables\n  var connection_part = '';\n  var auth_part = '';\n  var query_string_part = '';\n  var dbName = 'admin';\n  if (url.indexOf(\"/\") < 0) url = '127.0.0.1/' + url; // Must start with mongodb\n\n  if (url.indexOf(\"mongodb://\") != 0) url = 'mongodb://' + url; // If we have a ? mark cut the query elements off\n\n  if (url.indexOf(\"?\") != -1) {\n    query_string_part = url.substr(url.indexOf(\"?\") + 1);\n    connection_part = url.substring(\"mongodb://\".length, url.indexOf(\"?\"));\n  } else {\n    connection_part = url.substring(\"mongodb://\".length);\n  } // Check if we have auth params\n\n\n  if (connection_part.indexOf(\"@\") != -1) {\n    auth_part = connection_part.split(\"@\")[0];\n    connection_part = connection_part.split(\"@\")[1];\n  } // Check if the connection string has a db\n\n\n  if (connection_part.indexOf(\".sock\") != -1) {\n    if (connection_part.indexOf(\".sock/\") != -1) {\n      dbName = connection_part.split(\".sock/\")[1];\n      connection_part = connection_part.split(\"/\", connection_part.indexOf(\".sock\") + \".sock\".length);\n    }\n  } else if (connection_part.indexOf(\"/\") != -1) {\n    dbName = connection_part.split(\"/\")[1];\n    connection_part = connection_part.split(\"/\")[0];\n  } // Result object\n\n\n  var object = {}; // Pick apart the authentication part of the string\n\n  var authPart = auth_part || '';\n  var auth = authPart.split(':', 2); // Decode the URI components\n\n  auth[0] = decodeURIComponent(auth[0]);\n\n  if (auth[1]) {\n    auth[1] = decodeURIComponent(auth[1]);\n  } // Add auth to final object if we have 2 elements\n\n\n  if (auth.length == 2) object.auth = {\n    user: auth[0],\n    password: auth[1]\n  }; // Variables used for temporary storage\n\n  var hostPart;\n  var urlOptions;\n  var servers;\n  var serverOptions = {\n    socketOptions: {}\n  };\n  var dbOptions = {\n    read_preference_tags: []\n  };\n  var replSetServersOptions = {\n    socketOptions: {}\n  }; // Add server options to final object\n\n  object.server_options = serverOptions;\n  object.db_options = dbOptions;\n  object.rs_options = replSetServersOptions;\n  object.mongos_options = {}; // Let's check if we are using a domain socket\n\n  if (url.match(/\\.sock/)) {\n    // Split out the socket part\n    var domainSocket = url.substring(url.indexOf(\"mongodb://\") + \"mongodb://\".length, url.lastIndexOf(\".sock\") + \".sock\".length); // Clean out any auth stuff if any\n\n    if (domainSocket.indexOf(\"@\") != -1) domainSocket = domainSocket.split(\"@\")[1];\n    servers = [{\n      domain_socket: domainSocket\n    }];\n  } else {\n    // Split up the db\n    hostPart = connection_part; // Parse all server results\n\n    servers = hostPart.split(',').map(function (h) {\n      var _host, _port, ipv6match; //check if it matches [IPv6]:port, where the port number is optional\n\n\n      if (ipv6match = /\\[([^\\]]+)\\](?:\\:(.+))?/.exec(h)) {\n        _host = ipv6match[1];\n        _port = parseInt(ipv6match[2], 10) || 27017;\n      } else {\n        //otherwise assume it's IPv4, or plain hostname\n        var hostPort = h.split(':', 2);\n        _host = hostPort[0] || 'localhost';\n        _port = hostPort[1] != null ? parseInt(hostPort[1], 10) : 27017; // Check for localhost?safe=true style case\n\n        if (_host.indexOf(\"?\") != -1) _host = _host.split(/\\?/)[0];\n      } // Return the mapped object\n\n\n      return {\n        host: _host,\n        port: _port\n      };\n    });\n  } // Get the db name\n\n\n  object.dbName = dbName || 'admin'; // Split up all the options\n\n  urlOptions = (query_string_part || '').split(/[&;]/); // Ugh, we have to figure out which options go to which constructor manually.\n\n  urlOptions.forEach(function (opt) {\n    if (!opt) return;\n    var splitOpt = opt.split('='),\n        name = splitOpt[0],\n        value = splitOpt[1]; // Options implementations\n\n    switch (name) {\n      case 'slaveOk':\n      case 'slave_ok':\n        serverOptions.slave_ok = value == 'true';\n        dbOptions.slaveOk = value == 'true';\n        break;\n\n      case 'maxPoolSize':\n      case 'poolSize':\n        serverOptions.poolSize = parseInt(value, 10);\n        replSetServersOptions.poolSize = parseInt(value, 10);\n        break;\n\n      case 'autoReconnect':\n      case 'auto_reconnect':\n        serverOptions.auto_reconnect = value == 'true';\n        break;\n\n      case 'minPoolSize':\n        throw new Error(\"minPoolSize not supported\");\n\n      case 'maxIdleTimeMS':\n        throw new Error(\"maxIdleTimeMS not supported\");\n\n      case 'waitQueueMultiple':\n        throw new Error(\"waitQueueMultiple not supported\");\n\n      case 'waitQueueTimeoutMS':\n        throw new Error(\"waitQueueTimeoutMS not supported\");\n\n      case 'uuidRepresentation':\n        throw new Error(\"uuidRepresentation not supported\");\n\n      case 'ssl':\n        if (value == 'prefer') {\n          serverOptions.ssl = value;\n          replSetServersOptions.ssl = value;\n          break;\n        }\n\n        serverOptions.ssl = value == 'true';\n        replSetServersOptions.ssl = value == 'true';\n        break;\n\n      case 'replicaSet':\n      case 'rs_name':\n        replSetServersOptions.rs_name = value;\n        break;\n\n      case 'reconnectWait':\n        replSetServersOptions.reconnectWait = parseInt(value, 10);\n        break;\n\n      case 'retries':\n        replSetServersOptions.retries = parseInt(value, 10);\n        break;\n\n      case 'readSecondary':\n      case 'read_secondary':\n        replSetServersOptions.read_secondary = value == 'true';\n        break;\n\n      case 'fsync':\n        dbOptions.fsync = value == 'true';\n        break;\n\n      case 'journal':\n        dbOptions.j = value == 'true';\n        break;\n\n      case 'safe':\n        dbOptions.safe = value == 'true';\n        break;\n\n      case 'nativeParser':\n      case 'native_parser':\n        dbOptions.native_parser = value == 'true';\n        break;\n\n      case 'connectTimeoutMS':\n        serverOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);\n        replSetServersOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);\n        break;\n\n      case 'socketTimeoutMS':\n        serverOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);\n        replSetServersOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);\n        break;\n\n      case 'w':\n        dbOptions.w = parseInt(value, 10);\n        if (isNaN(dbOptions.w)) dbOptions.w = value;\n        break;\n\n      case 'authSource':\n        dbOptions.authSource = value;\n        break;\n\n      case 'gssapiServiceName':\n        dbOptions.gssapiServiceName = value;\n        break;\n\n      case 'authMechanism':\n        if (value == 'GSSAPI') {\n          // If no password provided decode only the principal\n          if (object.auth == null) {\n            var urlDecodeAuthPart = decodeURIComponent(authPart);\n            if (urlDecodeAuthPart.indexOf(\"@\") == -1) throw new Error(\"GSSAPI requires a provided principal\");\n            object.auth = {\n              user: urlDecodeAuthPart,\n              password: null\n            };\n          } else {\n            object.auth.user = decodeURIComponent(object.auth.user);\n          }\n        } else if (value == 'MONGODB-X509') {\n          object.auth = {\n            user: decodeURIComponent(authPart)\n          };\n        } // Only support GSSAPI or MONGODB-CR for now\n\n\n        if (value != 'GSSAPI' && value != 'MONGODB-X509' && value != 'MONGODB-CR' && value != 'SCRAM-SHA-1' && value != 'PLAIN') throw new Error(\"only GSSAPI, PLAIN, MONGODB-X509, SCRAM-SHA-1 or MONGODB-CR is supported by authMechanism\"); // Authentication mechanism\n\n        dbOptions.authMechanism = value;\n        break;\n\n      case 'wtimeoutMS':\n        dbOptions.wtimeout = parseInt(value, 10);\n        break;\n\n      case 'readPreference':\n        if (['primary', 'primaryPreferred', 'secondary', 'secondaryPreferred', 'nearest'].indexOf(value) === -1) throw new Error(\"readPreference must be either primary/primaryPreferred/secondary/secondaryPreferred/nearest\");\n        dbOptions.read_preference = value;\n        break;\n\n      case 'readPreferenceTags':\n        // Decode the value\n        value = decodeURIComponent(value); // Contains the tag object\n\n        var tagObject = {};\n\n        if (value == null || value == '') {\n          dbOptions.read_preference_tags.push(tagObject);\n          break;\n        } // Split up the tags\n\n\n        var tags = value.split(/\\,/);\n\n        for (var i = 0; i < tags.length; i++) {\n          var parts = tags[i].trim().split(/\\:/);\n          tagObject[parts[0]] = parts[1];\n        } // Set the preferences tags\n\n\n        dbOptions.read_preference_tags.push(tagObject);\n        break;\n\n      default:\n        break;\n    }\n  }); // No tags: should be null (not [])\n\n  if (dbOptions.read_preference_tags.length === 0) {\n    dbOptions.read_preference_tags = null;\n  } // Validate if there are an invalid write concern combinations\n\n\n  if ((dbOptions.w == -1 || dbOptions.w == 0) && (dbOptions.journal == true || dbOptions.fsync == true || dbOptions.safe == true)) throw new Error(\"w set to -1 or 0 cannot be combined with safe/w/journal/fsync\"); // If no read preference set it to primary\n\n  if (!dbOptions.read_preference) dbOptions.read_preference = 'primary'; // Add servers to result\n\n  object.servers = servers; // Returned parsed object\n\n  return object;\n};","map":null,"metadata":{},"sourceType":"script"}