{"ast":null,"code":"'use strict';\n\nvar _createClass = require('babel-runtime/helpers/create-class')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];\n\nvar _regeneratorRuntime = require('babel-runtime/regenerator')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\n_Object$defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nvar _mongodbCore = require('mongodb-core');\n\nvar _mongodbCore2 = _interopRequireDefault(_mongodbCore);\n\nvar _parseMongoUrl = require('parse-mongo-url');\n\nvar _parseMongoUrl2 = _interopRequireDefault(_parseMongoUrl);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _Collection = require('./Collection');\n\nvar _Collection2 = _interopRequireDefault(_Collection);\n\nvar _Cursor = require('./Cursor');\n\nvar _Cursor2 = _interopRequireDefault(_Cursor);\n\nvar Server = _mongodbCore2['default'].Server;\nvar ReplSet = _mongodbCore2['default'].ReplSet;\nvar MongoCR = _mongodbCore2['default'].MongoCR;\n\nvar Database = function () {\n  function Database(connectionString, options, collections) {\n    _classCallCheck(this, Database);\n\n    var self = this;\n\n    if (Array.isArray(options)) {\n      collections = options;\n      options = {};\n    }\n\n    self.options = options || {};\n\n    if (typeof connectionString === 'string') {\n      self.config = (0, _parseMongoUrl2['default'])(connectionString);\n    } else {\n      self.config = connectionString;\n    }\n\n    var db_options = self.config.db_options;\n    var writeConcern = {\n      w: 1\n    };\n\n    if (db_options) {\n      writeConcern = _lodash2['default'].pick(db_options, ['w', 'j', 'fsync', 'wtimeout']);\n\n      if (!writeConcern.w) {\n        writeConcern.w = 1;\n      }\n    }\n\n    _Object$defineProperty(self, 'writeConcern', {\n      writable: false,\n      value: writeConcern\n    });\n\n    if (collections) {\n      collections.forEach(function (collection) {\n        self[collection] = self.collection(collection); // set up members to enable db.foo.bar.collection\n\n        var parts = collection.split('.');\n        var last = parts.pop();\n        var parent = parts.reduce(function (parent, currentPart) {\n          return parent[currentPart] = parent[currentPart] || {};\n        }, self);\n        parent[last] = self.collection(last);\n      });\n    }\n  }\n\n  _createClass(Database, [{\n    key: 'addUser',\n    value: function addUser(user) {\n      return _regeneratorRuntime.async(function addUser$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(createUser(user));\n\n          case 2:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 3:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'close',\n    value: function close() {\n      var self;\n      return _regeneratorRuntime.async(function close$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            self = this;\n\n            if (!self._serverPromise) {\n              context$2$0.next = 6;\n              break;\n            }\n\n            context$2$0.next = 4;\n            return _regeneratorRuntime.awrap(self._serverPromise);\n\n          case 4:\n            context$2$0.sent.destroy();\n            self._serverPromise = null;\n\n          case 6:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'collection',\n    value: function collection(collectionName) {\n      return new _Collection2['default'](this, collectionName);\n    }\n  }, {\n    key: 'connect',\n    value: function connect() {\n      var self = this; // only connect once\n\n      if (self._serverPromise) {\n        return self._serverPromise;\n      } else {\n        return self._serverPromise = new _bluebird2['default'](function (resolve, reject) {\n          var options = null,\n              server = null;\n          var config = self.config; // create server connection for single server or replica set\n\n          if (config.servers.length === 1) {\n            options = config.server_options;\n            options.host = config.servers[0].host || 'localhost';\n            options.port = config.servers[0].port || 27017;\n            options.reconnect = true;\n            options.reconnectInterval = 50; // values specified in self.options override everything else\n\n            options = _lodash2['default'].extend({}, options, self.options);\n            server = new Server(options);\n          } else {\n            options = config.rs_options;\n            options.setName = options.rs_name;\n            options.reconnect = true;\n            options.reconnectInterval = 50;\n            options = _lodash2['default'].extend({}, options, self.options);\n            server = new ReplSet(config.servers, options);\n          }\n\n          if (config.auth) {\n            server.addAuthProvider('mongocr', new MongoCR()); // authenticate on connect\n\n            server.on('connect', function (server) {\n              server.auth('mongocr', config.dbName, config.auth.user, config.auth.password, function (error, server) {\n                if (error) {\n                  reject(error);\n                } else {\n                  resolve(server);\n                }\n              });\n            });\n          } else {\n            server.on('connect', function (server) {\n              resolve(server);\n            });\n          }\n\n          server.on('error', function (error) {\n            reject(error);\n          });\n          server.on('timeout', function (error) {\n            reject(error);\n          });\n          server.connect();\n        });\n      }\n    }\n  }, {\n    key: 'createCollection',\n    value: function createCollection(name, options) {\n      var cmd;\n      return _regeneratorRuntime.async(function createCollection$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            cmd = _lodash2['default'].extend({\n              create: name\n            }, options || {});\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.runCommand(cmd));\n\n          case 3:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 4:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'createUser',\n    value: function createUser(user) {\n      var cmd;\n      return _regeneratorRuntime.async(function createUser$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            if (!(typeof user !== 'object')) {\n              context$2$0.next = 2;\n              break;\n            }\n\n            throw new Error('user param should be an object');\n\n          case 2:\n            cmd = _lodash2['default'].extend({\n              createUser: user.user\n            }, user);\n            delete cmd.user;\n            context$2$0.next = 6;\n            return _regeneratorRuntime.awrap(this.runCommand(cmd));\n\n          case 6:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 7:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'dropDatabase',\n    value: function dropDatabase() {\n      return _regeneratorRuntime.async(function dropDatabase$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.runCommand('dropDatabase'));\n\n          case 2:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 3:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'dropUser',\n    value: function dropUser(username) {\n      return _regeneratorRuntime.async(function dropUser$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.runCommand({\n              dropUser: username\n            }));\n\n          case 2:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 3:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'getCollectionNames',\n    value: function getCollectionNames() {\n      var collection, names;\n      return _regeneratorRuntime.async(function getCollectionNames$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            collection = this.collection('system.namespaces');\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(collection.find({\n              name: /^((?!\\$).)*$/\n            }).toArray());\n\n          case 3:\n            names = context$2$0.sent;\n            return context$2$0.abrupt('return', names.map(function (name) {\n              // trim dbname from front of collection name\n              return name.name.substr(name.name.indexOf('.') + 1);\n            }));\n\n          case 5:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'getLastError',\n    value: function getLastError() {\n      return _regeneratorRuntime.async(function getLastError$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.runCommand('getLastError'));\n\n          case 2:\n            return context$2$0.abrupt('return', context$2$0.sent.err);\n\n          case 3:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'getLastErrorObj',\n    value: function getLastErrorObj() {\n      return _regeneratorRuntime.async(function getLastErrorObj$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.getLastError());\n\n          case 2:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 3:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'removeUser',\n    value: function removeUser(username) {\n      return _regeneratorRuntime.async(function removeUser$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.dropUser(username));\n\n          case 2:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 3:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'getSiblingDb',\n    value: function getSiblingDb(dbName, collections) {\n      var db2;\n      return _regeneratorRuntime.async(function getSiblingDb$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            db2 = new Database(_lodash2['default'].assign({}, this.config, {\n              dbName: dbName\n            }), collections);\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.connect());\n\n          case 3:\n            db2._serverPromise = context$2$0.sent;\n            return context$2$0.abrupt('return', db2);\n\n          case 5:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'runCommand',\n    value: function runCommand(options) {\n      var self, cmd, server;\n      return _regeneratorRuntime.async(function runCommand$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            self = this;\n\n            if (typeof options === 'string') {\n              cmd = options;\n              options = {};\n              options[cmd] = 1;\n            }\n\n            context$2$0.next = 4;\n            return _regeneratorRuntime.awrap(self.connect());\n\n          case 4:\n            server = context$2$0.sent;\n            context$2$0.next = 7;\n            return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {\n              server.command(self.config.dbName + '.$cmd', options, function (error, result) {\n                if (error) {\n                  reject(error);\n                } else {\n                  resolve(result.result);\n                }\n              });\n            }));\n\n          case 7:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 8:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'runCommandCursor',\n    value: function runCommandCursor(command, options) {\n      if (!options) {\n        options = {};\n        options[command] = 1;\n      }\n\n      var ns = '$cmd.' + command;\n      var collection = new _Collection2['default'](this, ns);\n      return new _Cursor2['default'](collection, this.config.dbName + '.' + ns, options);\n    }\n  }, {\n    key: 'stats',\n    value: function stats(scale) {\n      return _regeneratorRuntime.async(function stats$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            if (scale === undefined) {\n              scale = 1;\n            }\n\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.runCommand({\n              dbStats: 1,\n              scale: scale\n            }));\n\n          case 3:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 4:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return _regeneratorRuntime.async(function toString$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            return context$2$0.abrupt('return', this.config.dbName);\n\n          case 1:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }]);\n\n  return Database;\n}();\n\nexports['default'] = Database;\n;\nmodule.exports = exports['default']; // don't open a connection just to close it again\n// sanity check args","map":null,"metadata":{},"sourceType":"script"}