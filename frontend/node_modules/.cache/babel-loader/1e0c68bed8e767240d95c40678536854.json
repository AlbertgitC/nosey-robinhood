{"ast":null,"code":"import _objectWithoutProperties from \"/Users/jasimatiyeh/Desktop/aA_work/MERN Project/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/jasimatiyeh/Desktop/aA_work/MERN Project/frontend/src/util/route_util.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Redirect, withRouter } from 'react-router-dom'; // Passed in from parent component or from mapStateToProps\n\nconst Auth = ({\n  component: Component,\n  path,\n  loggedIn,\n  exact\n}) => React.createElement(Route, {\n  path: path,\n  exact: exact,\n  render: props => !loggedIn ? React.createElement(Component, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  })) : // Redirect to user profile page if the user is authenticated\n  React.createElement(Redirect, {\n    to: \"/users/:userId\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7\n  },\n  __self: this\n});\n\nconst Protected = (_ref) => {\n  let Component = _ref.component,\n      loggedIn = _ref.loggedIn,\n      rest = _objectWithoutProperties(_ref, [\"component\", \"loggedIn\"]);\n\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: props => loggedIn ? React.createElement(Component, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    })) : // Redirect to the login page if the user is not authenticated\n    React.createElement(Redirect, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }));\n}; // Use the isAuthenitcated slice of state to determine whether a user is logged in\n\n\nconst mapStateToProps = state => ({\n  loggedIn: state.session.isAuthenticated\n});\n\nexport const AuthRoute = withRouter(connect(mapStateToProps)(Auth));\nexport const ProtectedRoute = withRouter(connect(mapStateToProps)(Protected));","map":{"version":3,"sources":["/Users/jasimatiyeh/Desktop/aA_work/MERN Project/frontend/src/util/route_util.js"],"names":["React","connect","Route","Redirect","withRouter","Auth","component","Component","path","loggedIn","exact","props","Protected","rest","mapStateToProps","state","session","isAuthenticated","AuthRoute","ProtectedRoute"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,kBAA5C,C,CAEA;;AACA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwBC,EAAAA,IAAxB;AAA8BC,EAAAA,QAA9B;AAAwCC,EAAAA;AAAxC,CAAD,KACX,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAEF,IAAb;AAAmB,EAAA,KAAK,EAAEE,KAA1B;AAAiC,EAAA,MAAM,EAAGC,KAAD,IACvC,CAACF,QAAD,GACE,oBAAC,SAAD,oBAAeE,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,GAGI;AACA,sBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF;;AAWA,MAAMC,SAAS,GAAG;AAAA,MAAcL,SAAd,QAAGD,SAAH;AAAA,MAAyBG,QAAzB,QAAyBA,QAAzB;AAAA,MAAsCI,IAAtC;;AAAA,SAChB,oBAAC,KAAD,oBACMA,IADN;AAEE,IAAA,MAAM,EAAEF,KAAK,IACXF,QAAQ,GACN,oBAAC,SAAD,oBAAeE,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADM,GAGJ;AACA,wBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADgB;AAAA,CAAlB,C,CAcA;;;AAEA,MAAMG,eAAe,GAAGC,KAAK,KAC3B;AAAEN,EAAAA,QAAQ,EAAEM,KAAK,CAACC,OAAN,CAAcC;AAA1B,CAD2B,CAA7B;;AAIA,OAAO,MAAMC,SAAS,GAAGd,UAAU,CAACH,OAAO,CAACa,eAAD,CAAP,CAAyBT,IAAzB,CAAD,CAA5B;AAEP,OAAO,MAAMc,cAAc,GAAGf,UAAU,CAACH,OAAO,CAACa,eAAD,CAAP,CAAyBF,SAAzB,CAAD,CAAjC","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Redirect, withRouter } from 'react-router-dom';\n\n// Passed in from parent component or from mapStateToProps\nconst Auth = ({ component: Component, path, loggedIn, exact }) => (\n  <Route path={path} exact={exact} render={(props) => (\n    !loggedIn ? (\n      <Component {...props} />\n    ) : (\n        // Redirect to user profile page if the user is authenticated\n        <Redirect to=\"/users/:userId\" />\n      )\n  )} />\n);\n\nconst Protected = ({ component: Component, loggedIn, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      loggedIn ? (\n        <Component {...props} />\n      ) : (\n          // Redirect to the login page if the user is not authenticated\n          <Redirect to=\"/login\" />\n        )\n    }\n  />\n);\n\n// Use the isAuthenitcated slice of state to determine whether a user is logged in\n\nconst mapStateToProps = state => (\n  { loggedIn: state.session.isAuthenticated }\n);\n\nexport const AuthRoute = withRouter(connect(mapStateToProps)(Auth));\n\nexport const ProtectedRoute = withRouter(connect(mapStateToProps)(Protected));"]},"metadata":{},"sourceType":"module"}