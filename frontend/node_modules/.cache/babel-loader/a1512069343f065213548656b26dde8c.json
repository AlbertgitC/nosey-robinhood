{"ast":null,"code":"\"use strict\";\n/**\n * Creates a new MongoError\n * @class\n * @augments Error\n * @param {string} message The error message\n * @return {MongoError} A MongoError instance\n */\n\nfunction MongoError(message) {\n  this.name = 'MongoError';\n  this.message = message;\n  Error.captureStackTrace(this, MongoError);\n}\n/**\n * Creates a new MongoError object\n * @method\n * @param {object} options The error options\n * @return {MongoError} A MongoError instance\n */\n\n\nMongoError.create = function (options) {\n  var err = null;\n\n  if (options instanceof Error) {\n    err = new MongoError(options.message);\n    err.stack = options.stack;\n  } else if (typeof options == 'string') {\n    err = new MongoError(options);\n  } else {\n    err = new MongoError(options.message || options.errmsg || options.$err || \"n/a\"); // Other options\n\n    for (var name in options) {\n      err[name] = options[name];\n    }\n  }\n\n  return err;\n}; // Extend JavaScript error\n\n\nMongoError.prototype = new Error();\nmodule.exports = MongoError;","map":null,"metadata":{},"sourceType":"script"}