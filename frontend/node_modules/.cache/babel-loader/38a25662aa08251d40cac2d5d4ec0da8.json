{"ast":null,"code":"'use strict';\n\nvar hide = require('./$.hide'),\n    redefineAll = require('./$.redefine-all'),\n    anObject = require('./$.an-object'),\n    isObject = require('./$.is-object'),\n    strictNew = require('./$.strict-new'),\n    forOf = require('./$.for-of'),\n    createArrayMethod = require('./$.array-methods'),\n    $has = require('./$.has'),\n    WEAK = require('./$.uid')('weak'),\n    isExtensible = Object.isExtensible || isObject,\n    arrayFind = createArrayMethod(5),\n    arrayFindIndex = createArrayMethod(6),\n    id = 0; // fallback for frozen keys\n\n\nvar frozenStore = function (that) {\n  return that._l || (that._l = new FrozenStore());\n};\n\nvar FrozenStore = function () {\n  this.a = [];\n};\n\nvar findFrozen = function (store, key) {\n  return arrayFind(store.a, function (it) {\n    return it[0] === key;\n  });\n};\n\nFrozenStore.prototype = {\n  get: function (key) {\n    var entry = findFrozen(this, key);\n    if (entry) return entry[1];\n  },\n  has: function (key) {\n    return !!findFrozen(this, key);\n  },\n  set: function (key, value) {\n    var entry = findFrozen(this, key);\n    if (entry) entry[1] = value;else this.a.push([key, value]);\n  },\n  'delete': function (key) {\n    var index = arrayFindIndex(this.a, function (it) {\n      return it[0] === key;\n    });\n    if (~index) this.a.splice(index, 1);\n    return !!~index;\n  }\n};\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      strictNew(that, C, NAME);\n      that._i = id++; // collection id\n\n      that._l = undefined; // leak store for frozen objects\n\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.3.3.2 WeakMap.prototype.delete(key)\n      // 23.4.3.3 WeakSet.prototype.delete(value)\n      'delete': function (key) {\n        if (!isObject(key)) return false;\n        if (!isExtensible(key)) return frozenStore(this)['delete'](key);\n        return $has(key, WEAK) && $has(key[WEAK], this._i) && delete key[WEAK][this._i];\n      },\n      // 23.3.3.4 WeakMap.prototype.has(key)\n      // 23.4.3.4 WeakSet.prototype.has(value)\n      has: function has(key) {\n        if (!isObject(key)) return false;\n        if (!isExtensible(key)) return frozenStore(this).has(key);\n        return $has(key, WEAK) && $has(key[WEAK], this._i);\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    if (!isExtensible(anObject(key))) {\n      frozenStore(that).set(key, value);\n    } else {\n      $has(key, WEAK) || hide(key, WEAK, {});\n      key[WEAK][that._i] = value;\n    }\n\n    return that;\n  },\n  frozenStore: frozenStore,\n  WEAK: WEAK\n};","map":null,"metadata":{},"sourceType":"script"}