{"ast":null,"code":"\"use strict\";\n\nvar defaults = require('defaults');\n\nvar combining = require('./combining');\n\nvar DEFAULTS = {\n  nul: 0,\n  control: 0\n};\n\nmodule.exports = function wcwidth(str) {\n  return wcswidth(str, DEFAULTS);\n};\n\nmodule.exports.config = function (opts) {\n  opts = defaults(opts || {}, DEFAULTS);\n  return function wcwidth(str) {\n    return wcswidth(str, opts);\n  };\n};\n/*\n *  The following functions define the column width of an ISO 10646\n *  character as follows:\n *  - The null character (U+0000) has a column width of 0.\n *  - Other C0/C1 control characters and DEL will lead to a return value\n *    of -1.\n *  - Non-spacing and enclosing combining characters (general category\n *    code Mn or Me in the\n *    Unicode database) have a column width of 0.\n *  - SOFT HYPHEN (U+00AD) has a column width of 1.\n *  - Other format characters (general category code Cf in the Unicode\n *    database) and ZERO WIDTH\n *    SPACE (U+200B) have a column width of 0.\n *  - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF)\n *    have a column width of 0.\n *  - Spacing characters in the East Asian Wide (W) or East Asian\n *    Full-width (F) category as\n *    defined in Unicode Technical Report #11 have a column width of 2.\n *  - All remaining characters (including all printable ISO 8859-1 and\n *    WGL4 characters, Unicode control characters, etc.) have a column\n *    width of 1.\n *  This implementation assumes that characters are encoded in ISO 10646.\n*/\n\n\nfunction wcswidth(str, opts) {\n  if (typeof str !== 'string') return wcwidth(str, opts);\n  var s = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    var n = wcwidth(str.charCodeAt(i), opts);\n    if (n < 0) return -1;\n    s += n;\n  }\n\n  return s;\n}\n\nfunction wcwidth(ucs, opts) {\n  // test for 8-bit control characters\n  if (ucs === 0) return opts.nul;\n  if (ucs < 32 || ucs >= 0x7f && ucs < 0xa0) return opts.control; // binary search in table of non-spacing characters\n\n  if (bisearch(ucs)) return 0; // if we arrive here, ucs is not a combining or C0/C1 control character\n\n  return 1 + (ucs >= 0x1100 && (ucs <= 0x115f || // Hangul Jamo init. consonants\n  ucs == 0x2329 || ucs == 0x232a || ucs >= 0x2e80 && ucs <= 0xa4cf && ucs != 0x303f || // CJK ... Yi\n  ucs >= 0xac00 && ucs <= 0xd7a3 || // Hangul Syllables\n  ucs >= 0xf900 && ucs <= 0xfaff || // CJK Compatibility Ideographs\n  ucs >= 0xfe10 && ucs <= 0xfe19 || // Vertical forms\n  ucs >= 0xfe30 && ucs <= 0xfe6f || // CJK Compatibility Forms\n  ucs >= 0xff00 && ucs <= 0xff60 || // Fullwidth Forms\n  ucs >= 0xffe0 && ucs <= 0xffe6 || ucs >= 0x20000 && ucs <= 0x2fffd || ucs >= 0x30000 && ucs <= 0x3fffd));\n}\n\nfunction bisearch(ucs) {\n  var min = 0;\n  var max = combining.length - 1;\n  var mid;\n  if (ucs < combining[0][0] || ucs > combining[max][1]) return false;\n\n  while (max >= min) {\n    mid = Math.floor((min + max) / 2);\n    if (ucs > combining[mid][1]) min = mid + 1;else if (ucs < combining[mid][0]) max = mid - 1;else return true;\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"script"}