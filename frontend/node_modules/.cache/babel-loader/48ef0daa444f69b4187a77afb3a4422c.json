{"ast":null,"code":"/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\nvar flag = require('./flag'),\n    getActual = require('./getActual'),\n    inspect = require('./inspect'),\n    objDisplay = require('./objDisplay');\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate'),\n      val = flag(obj, 'object'),\n      expected = args[3],\n      actual = getActual(obj, args),\n      msg = negate ? args[2] : args[1],\n      flagMsg = flag(obj, 'message');\n  if (typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg.replace(/#\\{this\\}/g, function () {\n    return objDisplay(val);\n  }).replace(/#\\{act\\}/g, function () {\n    return objDisplay(actual);\n  }).replace(/#\\{exp\\}/g, function () {\n    return objDisplay(expected);\n  });\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};","map":null,"metadata":{},"sourceType":"script"}