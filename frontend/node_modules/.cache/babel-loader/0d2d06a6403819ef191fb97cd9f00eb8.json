{"ast":null,"code":"'use strict';\n\nvar E = require('linq'); //\n// An iterator that can step multiple other iterators at once.\n//\n\n\nvar MultiIterator = function (iterators) {\n  var self = this;\n  self._started = false;\n  self._iterators = iterators;\n};\n\nmodule.exports = MultiIterator; //\n// Move all iterators to the next element.\n// Returns false when complete and there are no more elements.\n// Completes when first iterator completes.\n//\t\n\nMultiIterator.prototype.moveNext = function () {\n  var self = this;\n  self._started = true;\n\n  if (self._iterators.length > 0) {\n    return E.from(self._iterators).select(function (iterator) {\n      return iterator.moveNext();\n    }).all();\n  } else {\n    return false;\n  }\n};\n\nMultiIterator.prototype.getCurrent = function () {\n  var self = this;\n\n  if (!self._started) {\n    return undefined;\n  }\n\n  return E.from(self._iterators).select(function (iterator) {\n    return iterator.getCurrent();\n  }).toArray();\n}; //\n// Bake the iterator into an array.\n//\n\n\nMultiIterator.prototype.realize = function () {\n  var self = this;\n  var output = [];\n\n  while (self.moveNext()) {\n    output.push(self.getCurrent());\n  }\n\n  return output;\n};","map":null,"metadata":{},"sourceType":"script"}