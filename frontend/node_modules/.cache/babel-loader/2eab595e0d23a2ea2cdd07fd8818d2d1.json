{"ast":null,"code":"/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar config = require('../config');\n\nvar flag = require('./flag');\n/**\n * ### addProperty (ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\n\nmodule.exports = function (ctx, name, getter) {\n  Object.defineProperty(ctx, name, {\n    get: function addProperty() {\n      var old_ssfi = flag(this, 'ssfi');\n      if (old_ssfi && config.includeStack === false) flag(this, 'ssfi', addProperty);\n      var result = getter.call(this);\n      return result === undefined ? this : result;\n    },\n    configurable: true\n  });\n};","map":null,"metadata":{},"sourceType":"script"}