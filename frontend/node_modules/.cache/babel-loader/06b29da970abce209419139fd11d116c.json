{"ast":null,"code":"'use strict';\n\nvar _createClass = require('babel-runtime/helpers/create-class')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];\n\nvar _regeneratorRuntime = require('babel-runtime/regenerator')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\n_Object$defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _mongodbCore = require('mongodb-core');\n\nvar _mongodbCore2 = _interopRequireDefault(_mongodbCore);\n\nvar Bulk = function () {\n  function Bulk(collection, ordered) {\n    _classCallCheck(this, Bulk);\n\n    this.collection = collection;\n    this.ordered = ordered;\n    this._currentCommand = null;\n    this._commands = [];\n  }\n\n  _createClass(Bulk, [{\n    key: 'execute',\n    value: function execute() {\n      var self, result, i, cmd, cmdResult;\n      return _regeneratorRuntime.async(function execute$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            self = this;\n            result = {\n              writeErrors: [],\n              writeConcernErrors: [],\n              nInserted: 0,\n              nUpdated: 0,\n              nMatched: 0,\n              nModified: 0,\n              nRemoved: 0,\n              upserted: []\n            };\n\n            self._commands.push(self._currentCommand);\n\n            i = 0;\n\n          case 4:\n            if (!(i < self._commands.length)) {\n              context$2$0.next = 13;\n              break;\n            }\n\n            cmd = self._commands[i];\n            context$2$0.next = 8;\n            return _regeneratorRuntime.awrap(self.collection.db.runCommand(cmd));\n\n          case 8:\n            cmdResult = context$2$0.sent;\n\n            if (cmd.update) {\n              result.nUpdated += cmdResult.result.n;\n            } else if (cmd.insert) {\n              result.nInserted += cmdResult.result.n;\n            } else if (cmd['delete']) {\n              result.nRemoved += cmdResult.result.n;\n            }\n\n          case 10:\n            ++i;\n            context$2$0.next = 4;\n            break;\n\n          case 13:\n            result.ok = 1;\n            return context$2$0.abrupt('return', result);\n\n          case 15:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'find',\n    value: function find(query) {\n      var findObject, self, remove, update;\n      return _regeneratorRuntime.async(function find$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            findObject = {};\n            self = this;\n\n            remove = function remove(limit) {\n              if (!self._currentCommand) {\n                self._currentCommand = {\n                  'delete': self.collection.collectionName,\n                  deletes: [],\n                  ordered: self.ordered,\n                  writeConcern: {\n                    w: 1\n                  }\n                };\n              } else if (!self._currentCommand['delete']) {\n                self._commands.push(self._currentCommand);\n\n                self._currentCommand = {\n                  'delete': self.collection.collectionName,\n                  deletes: [],\n                  ordered: self.ordered,\n                  writeConcern: {\n                    w: 1\n                  }\n                };\n              }\n\n              self._currentCommand.deletes.push({\n                q: query,\n                limit: limit\n              });\n            };\n\n            update = function update(updateObject, multiple) {\n              if (!self._currentCommand) {\n                self._currentCommand = {\n                  update: self.collection.collectionName,\n                  updates: [],\n                  ordered: self.ordered,\n                  writeConcern: {\n                    w: 1\n                  }\n                };\n              } else if (!self._currentCommand.update) {\n                self._commands.push(self._currentCommand);\n\n                self._currentCommand = {\n                  update: self.collection.collectionName,\n                  updates: [],\n                  ordered: self.ordered,\n                  writeConcern: {\n                    w: 1\n                  }\n                };\n              }\n\n              self._currentCommand.updates.push({\n                q: query,\n                u: updateObject,\n                multi: mulitple,\n                upsert: false\n              });\n            };\n\n            findObject.remove = function () {\n              remove(0);\n            };\n\n            findObject.removeOne = function () {\n              remove(1);\n            };\n\n            findObject.update = function (updateObject) {\n              update(updateObject, true);\n            };\n\n            findObject.updateOne = function (updateObject) {\n              update(updateObject, false);\n            };\n\n            return context$2$0.abrupt('return', findObject);\n\n          case 9:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'insert',\n    value: function insert(doc) {\n      var self = this;\n\n      if (!self._currentCommand) {\n        self._currentCommand = {\n          insert: self.collection.collectionName,\n          documents: [],\n          ordered: self.ordered,\n          writeConcern: {\n            w: 1\n          }\n        };\n      } else if (!self._currentCommand.insert) {\n        self._commands.push(self._currentCommand);\n\n        self._currentCommand = {\n          insert: self.collection.collectionName,\n          documents: [],\n          ordered: self.ordered,\n          writeConcern: {\n            w: 1\n          }\n        };\n      }\n\n      if (!doc._id) {\n        doc._id = _mongodbCore2['default'].BSON.ObjectID.createPk();\n      }\n\n      this._currentCommand.documents.push(doc);\n    }\n  }, {\n    key: 'tojson',\n    value: function tojson() {\n      var result = {\n        nInsertOps: 0,\n        nUpdateOps: 0,\n        nRemoveOps: 0,\n        nBatches: this._commands.length\n      };\n\n      this._commands.forEach(function (cmd) {\n        if (cmd.update) {\n          result.nUpdateOps += cmd.updates.length;\n        } else if (cmd.insert) {\n          result.nInsertOps += cmd.documents.length;\n        } else if (cmd['delete']) {\n          result.nRemoveOps += cmd.deletes.length;\n        }\n      });\n\n      return result;\n    }\n  }]);\n\n  return Bulk;\n}();\n\nexports['default'] = Bulk;\n;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}