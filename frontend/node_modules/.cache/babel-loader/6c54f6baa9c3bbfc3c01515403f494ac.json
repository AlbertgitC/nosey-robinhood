{"ast":null,"code":"\"use strict\";\n\nvar inherits = require('util').inherits,\n    f = require('util').format,\n    EventEmitter = require('events').EventEmitter;\n/**\n * Creates a new Authentication Session\n * @class\n * @param {object} [options] Options for the session\n * @param {{Server}|{ReplSet}|{Mongos}} topology The topology instance underpinning the session\n */\n\n\nvar Session = function (options, topology) {\n  this.options = options;\n  this.topology = topology; // Add event listener\n\n  EventEmitter.call(this);\n};\n\ninherits(Session, EventEmitter);\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {object} [options.readPreference] Specify read preference if command supports it\n * @param {object} [options.connection] Specify connection object to execute command against\n * @param {opResultCallback} callback A callback function\n */\n\nSession.prototype.command = function (ns, cmd, options, callback) {\n  this.topology.command(ns, cmd, options, callback);\n};\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {opResultCallback} callback A callback function\n */\n\n\nSession.prototype.insert = function (ns, ops, options, callback) {\n  this.topology.insert(ns, ops, options, callback);\n};\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {opResultCallback} callback A callback function\n */\n\n\nSession.prototype.update = function (ns, ops, options, callback) {\n  this.topology.update(ns, ops, options, callback);\n};\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {opResultCallback} callback A callback function\n */\n\n\nSession.prototype.remove = function (ns, ops, options, callback) {\n  this.topology.remove(ns, ops, options, callback);\n};\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {{object}|{Long}} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {boolean} [options.tailable=false] Tailable flag set\n * @param {boolean} [options.oplogReply=false] oplogReply flag set\n * @param {boolean} [options.awaitdata=false] awaitdata flag set\n * @param {boolean} [options.exhaust=false] exhaust flag set\n * @param {boolean} [options.partial=false] partial flag set\n * @param {opResultCallback} callback A callback function\n */\n\n\nSession.prototype.cursor = function (ns, cmd, options) {\n  return this.topology.cursor(ns, cmd, options);\n};\n\nmodule.exports = Session;","map":null,"metadata":{},"sourceType":"script"}