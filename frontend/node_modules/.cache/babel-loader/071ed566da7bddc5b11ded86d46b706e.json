{"ast":null,"code":"\"use strict\"; // Set property function\n\nvar setProperty = function (obj, prop, flag, values) {\n  Object.defineProperty(obj, prop.name, {\n    enumerable: true,\n    set: function (value) {\n      if (typeof value != 'boolean') throw new Error(f(\"%s required a boolean\", prop.name)); // Flip the bit to 1\n\n      if (value == true) values.flags |= flag; // Flip the bit to 0 if it's set, otherwise ignore\n\n      if (value == false && (values.flags & flag) == flag) values.flags ^= flag;\n      prop.value = value;\n    },\n    get: function () {\n      return prop.value;\n    }\n  });\n}; // Set property function\n\n\nvar getProperty = function (obj, propName, fieldName, values, func) {\n  Object.defineProperty(obj, propName, {\n    enumerable: true,\n    get: function () {\n      // Not parsed yet, parse it\n      if (values[fieldName] == null && obj.isParsed && !obj.isParsed()) {\n        obj.parse();\n      } // Do we have a post processing function\n\n\n      if (typeof func == 'function') return func(values[fieldName]); // Return raw value\n\n      return values[fieldName];\n    }\n  });\n}; // Set simple property\n\n\nvar getSingleProperty = function (obj, name, value) {\n  Object.defineProperty(obj, name, {\n    enumerable: true,\n    get: function () {\n      return value;\n    }\n  });\n}; // Shallow copy\n\n\nvar copy = function (fObj, tObj) {\n  tObj = tObj || {};\n\n  for (var name in fObj) tObj[name] = fObj[name];\n\n  return tObj;\n};\n\nvar debugOptions = function (debugFields, options) {\n  var finaloptions = {};\n  debugFields.forEach(function (n) {\n    finaloptions[n] = options[n];\n  });\n  return finaloptions;\n};\n/**\n * @ignore\n */\n\n\nvar bindToCurrentDomain = function (callback) {\n  var domain = process.domain;\n  if (domain == null || callback == null) return callback;\n  var boundCallback = domain.bind(callback); // Copy all fields over\n\n  for (var name in callback) {\n    boundCallback[name] = callback[name];\n  } // Return the bound callback\n\n\n  return boundCallback;\n};\n\nexports.setProperty = setProperty;\nexports.getProperty = getProperty;\nexports.getSingleProperty = getSingleProperty;\nexports.copy = copy;\nexports.bindToCurrentDomain = bindToCurrentDomain;\nexports.debugOptions = debugOptions;","map":null,"metadata":{},"sourceType":"script"}