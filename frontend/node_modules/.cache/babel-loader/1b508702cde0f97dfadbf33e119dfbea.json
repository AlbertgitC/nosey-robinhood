{"ast":null,"code":"'use strict';\n\nvar assert = require('chai').assert; //\n// Represents a sequence of index/value pairs as returned by the asPairs fn.\n//\n\n\nvar Pairs = function (config, valuesConstructor) {\n  assert.isObject(config, \"Expected 'config' parameter to be a function.\");\n  assert.isFunction(valuesConstructor, \"Expected 'valuesConstructor' parameter to be a factory function.\");\n  var self = this;\n\n  self.factory = function (config) {\n    return new Pairs(config, valuesConstructor);\n  };\n\n  self._ValuesConstructor = valuesConstructor;\n  Series.call(this, config);\n};\n\nmodule.exports = Pairs;\n\nvar Series = require('./series');\n\nvar inherit = require('./inherit');\n\nvar parent = inherit(Pairs, Series);\n\nvar SelectPairsIterable = require('../src/iterables/select-pairs');\n/** \r\n * Convert a series of pairs to back to a series of values.\r\n * \r\n * @returns {Series} Returns a series of values where each pair has been extracted from the value of the input series.\r\n */\n\n\nPairs.prototype.asValues = function () {\n  var self = this;\n  return self._ValuesConstructor({\n    iterable: new SelectPairsIterable(self, function (index, value) {\n      return [value[0], value[1]];\n    })\n  });\n};","map":null,"metadata":{},"sourceType":"script"}