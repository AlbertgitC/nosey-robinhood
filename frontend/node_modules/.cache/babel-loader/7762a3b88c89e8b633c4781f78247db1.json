{"ast":null,"code":"'use strict';\n\nvar SelectPairsIterable = function (iterable, selector) {\n  var self = this;\n  self._iterable = iterable;\n  self._selector = selector;\n};\n\nmodule.exports = SelectPairsIterable;\n\nvar SelectIterator = require('../iterators/select');\n\nvar E = require('linq');\n\nSelectPairsIterable.prototype.getIterator = function () {\n  var self = this;\n  return new SelectIterator(self._iterable.getIterator(), function (pair) {\n    var newPair = self._selector(pair[0], pair[1]);\n\n    if (!Object.isArray(newPair) || newPair.length !== 2) {\n      throw new Error(\"Expected return value from 'Series.selectPairs' selector to be a pair, that is an array with two items: [index, value].\");\n    }\n\n    return newPair;\n  });\n};\n\nSelectPairsIterable.prototype.getColumnNames = function () {\n  var self = this;\n\n  var iterator = self._iterable.getIterator(); // Consider all rows, this expensive, todo: how do I can make this cheaper!\n\n\n  var pairs = [];\n\n  while (iterator.moveNext()) {\n    pairs.push(iterator.getCurrent());\n  }\n\n  return E.from(pairs).selectMany(function (pair) {\n    var transformed = self._selector(pair[0], pair[1]); // Extract value and get fields.\n\n\n    return Object.keys(transformed[1]);\n  }).distinct().toArray();\n};","map":null,"metadata":{},"sourceType":"script"}