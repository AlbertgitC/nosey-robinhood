{"ast":null,"code":"/*!\n * Chai - hasProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar type = require('type-detect');\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has\n * named property or numeric array index.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with natives\n * and null/undefined values.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty('str', obj);  // true\n *     hasProperty('constructor', obj);  // true\n *     hasProperty('bar', obj);  // false\n *\n *     hasProperty('length', obj.str); // true\n *     hasProperty(1, obj.str);  // true\n *     hasProperty(5, obj.str);  // false\n *\n *     hasProperty('length', obj.arr);  // true\n *     hasProperty(2, obj.arr);  // true\n *     hasProperty(3, obj.arr);  // false\n *\n * @param {Objuect} object\n * @param {String|Number} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\n\nvar literals = {\n  'number': Number,\n  'string': String\n};\n\nmodule.exports = function hasProperty(name, obj) {\n  var ot = type(obj); // Bad Object, obviously no props at all\n\n  if (ot === 'null' || ot === 'undefined') return false; // The `in` operator does not work with certain literals\n  // box these before the check\n\n  if (literals[ot] && typeof obj !== 'object') obj = new literals[ot](obj);\n  return name in obj;\n};","map":null,"metadata":{},"sourceType":"script"}