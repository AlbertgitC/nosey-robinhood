{"ast":null,"code":"'use strict';\n/**\r\n * Constructor for Index.\r\n * @constructor\r\n * @extends dataForge.Series\r\n * @memberof dataForge\r\n * @param {object|array} config|values - Specifies content and configuration for the Index.\r\n */\n\nvar Index = function (config) {\n  var self = this;\n\n  if (!self.Constructor) {\n    self.Constructor = Index;\n  }\n\n  Series.call(this, config);\n};\n\nmodule.exports = Index;\n\nvar inherit = require('./inherit');\n\nvar Series = require('./series');\n\nvar parent = inherit(Index, Series);\n\nvar moment = require('moment');\n/**\r\n * Get the type of the index.\r\n * \r\n * @returns {string} Returns a string that specifies the type of the index.\r\n */\n\n\nIndex.prototype.getType = function () {\n  var self = this;\n\n  if (!self._type) {\n    //\n    // Detect the type.\n    //\n    if (self.any()) {\n      var firstValue = self.first();\n\n      if (Object.isNumber(firstValue)) {\n        self._type = 'number';\n      } else if (Object.isString(firstValue)) {\n        self._type = 'string';\n      } else if (firstValue instanceof Date) {\n        self._type = 'date';\n      } else {\n        self._type = 'unsupported';\n      }\n    } else {\n      self._type = 'empty';\n    }\n  }\n\n  return self._type;\n};\n/**\r\n * Get the less than operation for the index.\r\n * \r\n * @returns {function} Returns a function that can be used to compare a value against an index value.\r\n */\n\n\nIndex.prototype.getLessThan = function () {\n  var self = this;\n\n  switch (self.getType()) {\n    case \"date\":\n      return function (d1, d2) {\n        return moment(d1).isBefore(d2);\n      };\n\n    case \"string\":\n    case \"number\":\n      return function (v1, v2) {\n        return v1 < v2;\n      };\n\n    case \"empty\":\n      return function () {\n        return true; // Series is empty, so this makes no difference.\n      };\n\n    default:\n      throw new Error(\"No less than operation available for type: \" + self.getType());\n  }\n};\n/**\r\n * Get the greater than operation for the index.\r\n * \r\n * @returns {function} Returns a function that can be used to compare a value against an index value.\r\n */\n\n\nIndex.prototype.getGreaterThan = function () {\n  var self = this;\n\n  switch (self.getType()) {\n    case \"date\":\n      return function (d1, d2) {\n        return moment(d1).isAfter(d2);\n      };\n\n    case \"string\":\n    case \"number\":\n      return function (v1, v2) {\n        return v1 > v2;\n      };\n\n    case \"empty\":\n      return function () {\n        return true; // Series is empty, so this makes no difference.\n      };\n\n    default:\n      throw new Error(\"No greater than operation available for type: \" + self.getType());\n  }\n};","map":null,"metadata":{},"sourceType":"script"}