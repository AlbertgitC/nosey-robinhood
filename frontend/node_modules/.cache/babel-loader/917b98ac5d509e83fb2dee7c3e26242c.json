{"ast":null,"code":"/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\nvar transferFlags = require('./transferFlags');\n\nvar flag = require('./flag');\n\nvar config = require('../config');\n/*!\n * Module variables\n */\n// Check whether `__proto__` is supported\n\n\nvar hasProtoSupport = '__proto__' in Object; // Without `__proto__` support, this module will need to add properties to a function.\n// However, some Function.prototype methods cannot be overwritten,\n// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).\n\nvar excludeNames = /^(?:length|name|arguments|caller)$/; // Cache `Function` properties\n\nvar call = Function.prototype.call,\n    apply = Function.prototype.apply;\n/**\n * ### addChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () {};\n  }\n\n  var chainableBehavior = {\n    method: method,\n    chainingBehavior: chainingBehavior\n  }; // save the methods so we can overwrite them later, if we need to.\n\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n\n  ctx.__methods[name] = chainableBehavior;\n  Object.defineProperty(ctx, name, {\n    get: function () {\n      chainableBehavior.chainingBehavior.call(this);\n\n      var assert = function assert() {\n        var old_ssfi = flag(this, 'ssfi');\n        if (old_ssfi && config.includeStack === false) flag(this, 'ssfi', assert);\n        var result = chainableBehavior.method.apply(this, arguments);\n        return result === undefined ? this : result;\n      }; // Use `__proto__` if available\n\n\n      if (hasProtoSupport) {\n        // Inherit all properties from the object by replacing the `Function` prototype\n        var prototype = assert.__proto__ = Object.create(this); // Restore the `call` and `apply` methods from `Function`\n\n        prototype.call = call;\n        prototype.apply = apply;\n      } // Otherwise, redefine all properties (slow!)\n      else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (!excludeNames.test(asserterName)) {\n              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n              Object.defineProperty(assert, asserterName, pd);\n            }\n          });\n        }\n\n      transferFlags(this, assert);\n      return assert;\n    },\n    configurable: true\n  });\n};","map":null,"metadata":{},"sourceType":"script"}