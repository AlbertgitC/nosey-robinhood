{"ast":null,"code":"'use strict'; // ECMAScript 6 symbols shim\n\nvar $ = require('./$'),\n    global = require('./$.global'),\n    has = require('./$.has'),\n    DESCRIPTORS = require('./$.descriptors'),\n    $export = require('./$.export'),\n    redefine = require('./$.redefine'),\n    $fails = require('./$.fails'),\n    shared = require('./$.shared'),\n    setToStringTag = require('./$.set-to-string-tag'),\n    uid = require('./$.uid'),\n    wks = require('./$.wks'),\n    keyOf = require('./$.keyof'),\n    $names = require('./$.get-names'),\n    enumKeys = require('./$.enum-keys'),\n    isArray = require('./$.is-array'),\n    anObject = require('./$.an-object'),\n    toIObject = require('./$.to-iobject'),\n    createDesc = require('./$.property-desc'),\n    getDesc = $.getDesc,\n    setDesc = $.setDesc,\n    _create = $.create,\n    getNames = $names.get,\n    $Symbol = global.Symbol,\n    $JSON = global.JSON,\n    _stringify = $JSON && $JSON.stringify,\n    setter = false,\n    HIDDEN = wks('_hidden'),\n    isEnum = $.isEnum,\n    SymbolRegistry = shared('symbol-registry'),\n    AllSymbols = shared('symbols'),\n    useNative = typeof $Symbol == 'function',\n    ObjectProto = Object.prototype; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\n\n\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(setDesc({}, 'a', {\n    get: function () {\n      return setDesc(this, 'a', {\n        value: 7\n      }).a;\n    }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = getDesc(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  setDesc(it, key, D);\n  if (protoDesc && it !== ObjectProto) setDesc(ObjectProto, key, protoDesc);\n} : setDesc;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol.prototype);\n\n  sym._k = tag;\n  DESCRIPTORS && setter && setSymbolDesc(ObjectProto, tag, {\n    configurable: true,\n    set: function (value) {\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    }\n  });\n  return sym;\n};\n\nvar isSymbol = function (it) {\n  return typeof it == 'symbol';\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (D && has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) setDesc(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, {\n        enumerable: createDesc(0, false)\n      });\n    }\n\n    return setSymbolDesc(it, key, D);\n  }\n\n  return setDesc(it, key, D);\n};\n\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P)),\n      i = 0,\n      l = keys.length,\n      key;\n\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n\n  return it;\n};\n\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\n\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key);\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\n\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  var D = getDesc(it = toIObject(it), key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\n\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = getNames(toIObject(it)),\n      result = [],\n      i = 0,\n      key;\n\n  while (names.length > i) if (!has(AllSymbols, key = names[i++]) && key != HIDDEN) result.push(key);\n\n  return result;\n};\n\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var names = getNames(toIObject(it)),\n      result = [],\n      i = 0,\n      key;\n\n  while (names.length > i) if (has(AllSymbols, key = names[i++])) result.push(AllSymbols[key]);\n\n  return result;\n};\n\nvar $stringify = function stringify(it) {\n  if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n\n  var args = [it],\n      i = 1,\n      $$ = arguments,\n      replacer,\n      $replacer;\n\n  while ($$.length > i) args.push($$[i++]);\n\n  replacer = args[1];\n  if (typeof replacer == 'function') $replacer = replacer;\n  if ($replacer || !isArray(replacer)) replacer = function (key, value) {\n    if ($replacer) value = $replacer.call(this, key, value);\n    if (!isSymbol(value)) return value;\n  };\n  args[1] = replacer;\n  return _stringify.apply($JSON, args);\n};\n\nvar buggyJSON = $fails(function () {\n  var S = $Symbol(); // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n\n  return _stringify([S]) != '[null]' || _stringify({\n    a: S\n  }) != '{}' || _stringify(Object(S)) != '{}';\n}); // 19.4.1.1 Symbol([description])\n\nif (!useNative) {\n  $Symbol = function Symbol() {\n    if (isSymbol(this)) throw TypeError('Symbol is not a constructor');\n    return wrap(uid(arguments.length > 0 ? arguments[0] : undefined));\n  };\n\n  redefine($Symbol.prototype, 'toString', function toString() {\n    return this._k;\n  });\n\n  isSymbol = function (it) {\n    return it instanceof $Symbol;\n  };\n\n  $.create = $create;\n  $.isEnum = $propertyIsEnumerable;\n  $.getDesc = $getOwnPropertyDescriptor;\n  $.setDesc = $defineProperty;\n  $.setDescs = $defineProperties;\n  $.getNames = $names.get = $getOwnPropertyNames;\n  $.getSymbols = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./$.library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n}\n\nvar symbolStatics = {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(key) {\n    return keyOf(SymbolRegistry, key);\n  },\n  useSetter: function () {\n    setter = true;\n  },\n  useSimple: function () {\n    setter = false;\n  }\n}; // 19.4.2.2 Symbol.hasInstance\n// 19.4.2.3 Symbol.isConcatSpreadable\n// 19.4.2.4 Symbol.iterator\n// 19.4.2.6 Symbol.match\n// 19.4.2.8 Symbol.replace\n// 19.4.2.9 Symbol.search\n// 19.4.2.10 Symbol.species\n// 19.4.2.11 Symbol.split\n// 19.4.2.12 Symbol.toPrimitive\n// 19.4.2.13 Symbol.toStringTag\n// 19.4.2.14 Symbol.unscopables\n\n$.each.call(('hasInstance,isConcatSpreadable,iterator,match,replace,search,' + 'species,split,toPrimitive,toStringTag,unscopables').split(','), function (it) {\n  var sym = wks(it);\n  symbolStatics[it] = useNative ? sym : wrap(sym);\n});\nsetter = true;\n$export($export.G + $export.W, {\n  Symbol: $Symbol\n});\n$export($export.S, 'Symbol', symbolStatics);\n$export($export.S + $export.F * !useNative, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n}); // 24.3.2 JSON.stringify(value [, replacer [, space]])\n\n$JSON && $export($export.S + $export.F * (!useNative || buggyJSON), 'JSON', {\n  stringify: $stringify\n}); // 19.4.3.5 Symbol.prototype[@@toStringTag]\n\nsetToStringTag($Symbol, 'Symbol'); // 20.2.1.9 Math[@@toStringTag]\n\nsetToStringTag(Math, 'Math', true); // 24.3.3 JSON[@@toStringTag]\n\nsetToStringTag(global.JSON, 'JSON', true);","map":null,"metadata":{},"sourceType":"script"}