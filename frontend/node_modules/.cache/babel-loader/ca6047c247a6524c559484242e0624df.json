{"ast":null,"code":"\"use strict\";\n\nvar Insert = require('./commands').Insert,\n    Update = require('./commands').Update,\n    Remove = require('./commands').Remove,\n    Query = require('../connection/commands').Query,\n    copy = require('../connection/utils').copy,\n    KillCursor = require('../connection/commands').KillCursor,\n    GetMore = require('../connection/commands').GetMore,\n    Query = require('../connection/commands').Query,\n    ReadPreference = require('../topologies/read_preference'),\n    f = require('util').format,\n    CommandResult = require('../topologies/command_result'),\n    MongoError = require('../error'),\n    Long = require('bson').Long,\n    getReadPreference = require('./shared').getReadPreference; // Write concern fields\n\n\nvar writeConcernFields = ['w', 'wtimeout', 'j', 'fsync'];\n\nvar WireProtocol = function () {}; //\n// Needs to support legacy mass insert as well as ordered/unordered legacy\n// emulation\n//\n\n\nWireProtocol.prototype.insert = function (topology, ismaster, ns, bson, pool, callbacks, ops, options, callback) {\n  options = options || {}; // Default is ordered execution\n\n  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;\n  var legacy = typeof options.legacy == 'boolean' ? options.legacy : false;\n  ops = Array.isArray(ops) ? ops : [ops]; // If we have more than a 1000 ops fails\n\n  if (ops.length > 1000) return callback(new MongoError(\"exceeded maximum write batch size of 1000\")); // Write concern\n\n  var writeConcern = options.writeConcern || {\n    w: 1\n  }; // We are unordered\n\n  if (!ordered || writeConcern.w == 0) {\n    return executeUnordered('insert', Insert, ismaster, ns, bson, pool, callbacks, ops, options, callback);\n  }\n\n  return executeOrdered('insert', Insert, ismaster, ns, bson, pool, callbacks, ops, options, callback);\n};\n\nWireProtocol.prototype.update = function (topology, ismaster, ns, bson, pool, callbacks, ops, options, callback) {\n  options = options || {}; // Default is ordered execution\n\n  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;\n  ops = Array.isArray(ops) ? ops : [ops]; // Write concern\n\n  var writeConcern = options.writeConcern || {\n    w: 1\n  }; // We are unordered\n\n  if (!ordered || writeConcern.w == 0) {\n    return executeUnordered('update', Update, ismaster, ns, bson, pool, callbacks, ops, options, callback);\n  }\n\n  return executeOrdered('update', Update, ismaster, ns, bson, pool, callbacks, ops, options, callback);\n};\n\nWireProtocol.prototype.remove = function (topology, ismaster, ns, bson, pool, callbacks, ops, options, callback) {\n  options = options || {}; // Default is ordered execution\n\n  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;\n  ops = Array.isArray(ops) ? ops : [ops]; // Write concern\n\n  var writeConcern = options.writeConcern || {\n    w: 1\n  }; // We are unordered\n\n  if (!ordered || writeConcern.w == 0) {\n    return executeUnordered('remove', Remove, ismaster, ns, bson, pool, callbacks, ops, options, callback);\n  }\n\n  return executeOrdered('remove', Remove, ismaster, ns, bson, pool, callbacks, ops, options, callback);\n};\n\nWireProtocol.prototype.killCursor = function (bson, ns, cursorId, pool, callbacks, callback) {\n  // Create a kill cursor command\n  var killCursor = new KillCursor(bson, [cursorId]); // Execute the kill cursor command\n\n  if (pool && pool.isConnected()) pool.write(killCursor.toBin(), callback, {\n    immediateRelease: true\n  }); // Set cursor to 0\n\n  cursorId = Long.ZERO; // Return to caller\n\n  if (callback) callback(null, null);\n};\n\nWireProtocol.prototype.getMore = function (bson, ns, cursorState, batchSize, raw, connection, callbacks, options, callback) {\n  // Create getMore command\n  var getMore = new GetMore(bson, ns, cursorState.cursorId, {\n    numberToReturn: batchSize\n  }); // Query callback\n\n  var queryCallback = function (err, r) {\n    if (err) return callback(err); // If we have a timed out query or a cursor that was killed\n\n    if ((r.responseFlags & 1 << 0) != 0) {\n      return callback(new MongoError(\"cursor killed or timed out\"), null);\n    } // Ensure we have a Long valie cursor id\n\n\n    var cursorId = typeof r.cursorId == 'number' ? Long.fromNumber(r.cursorId) : r.cursorId; // Set all the values\n\n    cursorState.documents = r.documents;\n    cursorState.cursorId = cursorId; // Return\n\n    callback(null, null, r.connection);\n  }; // If we have a raw query decorate the function\n\n\n  if (raw) {\n    queryCallback.raw = raw;\n  } // Check if we need to promote longs\n\n\n  if (typeof cursorState.promoteLongs == 'boolean') {\n    queryCallback.promoteLongs = cursorState.promoteLongs;\n  } // Register a callback\n\n\n  callbacks.register(getMore.requestId, queryCallback); // Write out the getMore command\n\n  connection.write(getMore.toBin(), queryCallback);\n};\n\nWireProtocol.prototype.command = function (bson, ns, cmd, cursorState, topology, options) {\n  // Establish type of command\n  if (cmd.find) {\n    return setupClassicFind(bson, ns, cmd, cursorState, topology, options);\n  } else if (cursorState.cursorId != null) {} else if (cmd) {\n    return setupCommand(bson, ns, cmd, cursorState, topology, options);\n  } else {\n    throw new MongoError(f(\"command %s does not return a cursor\", JSON.stringify(cmd)));\n  }\n}; //\n// Execute a find command\n\n\nvar setupClassicFind = function (bson, ns, cmd, cursorState, topology, options) {\n  // Ensure we have at least some options\n  options = options || {}; // Get the readPreference\n\n  var readPreference = getReadPreference(cmd, options); // Set the optional batchSize\n\n  cursorState.batchSize = cmd.batchSize || cursorState.batchSize;\n  var numberToReturn = 0; // Unpack the limit and batchSize values\n\n  if (cursorState.limit == 0) {\n    numberToReturn = cursorState.batchSize;\n  } else if (cursorState.limit < 0 || cursorState.limit < cursorState.batchSize || cursorState.limit > 0 && cursorState.batchSize == 0) {\n    numberToReturn = cursorState.limit;\n  } else {\n    numberToReturn = cursorState.batchSize;\n  }\n\n  var numberToSkip = cursorState.skip || 0; // Build actual find command\n\n  var findCmd = {}; // Using special modifier\n\n  var usesSpecialModifier = false; // We have a Mongos topology, check if we need to add a readPreference\n\n  if (topology.type == 'mongos' && readPreference) {\n    findCmd['$readPreference'] = readPreference.toJSON();\n    usesSpecialModifier = true;\n  } // Add special modifiers to the query\n\n\n  if (cmd.sort) findCmd['orderby'] = cmd.sort, usesSpecialModifier = true;\n  if (cmd.hint) findCmd['$hint'] = cmd.hint, usesSpecialModifier = true;\n  if (cmd.snapshot) findCmd['$snapshot'] = cmd.snapshot, usesSpecialModifier = true;\n  if (cmd.returnKey) findCmd['$returnKey'] = cmd.returnKey, usesSpecialModifier = true;\n  if (cmd.maxScan) findCmd['$maxScan'] = cmd.maxScan, usesSpecialModifier = true;\n  if (cmd.min) findCmd['$min'] = cmd.min, usesSpecialModifier = true;\n  if (cmd.max) findCmd['$max'] = cmd.max, usesSpecialModifier = true;\n  if (cmd.showDiskLoc) findCmd['$showDiskLoc'] = cmd.showDiskLoc, usesSpecialModifier = true;\n  if (cmd.comment) findCmd['$comment'] = cmd.comment, usesSpecialModifier = true;\n  if (cmd.maxTimeMS) findCmd['$maxTimeMS'] = cmd.maxTimeMS, usesSpecialModifier = true;\n\n  if (cmd.explain) {\n    // nToReturn must be 0 (match all) or negative (match N and close cursor)\n    // nToReturn > 0 will give explain results equivalent to limit(0)\n    numberToReturn = -Math.abs(cmd.limit || 0);\n    usesSpecialModifier = true;\n    findCmd['$explain'] = true;\n  } // If we have a special modifier\n\n\n  if (usesSpecialModifier) {\n    findCmd['$query'] = cmd.query;\n  } else {\n    findCmd = cmd.query;\n  } // Throw on majority readConcern passed in\n\n\n  if (cmd.readConcern && cmd.readConcern.level != 'local') {\n    throw new MongoError(f('server find command does not support a readConcern level of %s', cmd.readConcern.level));\n  } // Remove readConcern, ensure no failing commands\n\n\n  if (cmd.readConcern) {\n    cmd = copy(cmd);\n    delete cmd['readConcern'];\n  } // Set up the serialize and ignoreUndefined fields\n\n\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false; // Build Query object\n\n  var query = new Query(bson, ns, findCmd, {\n    numberToSkip: numberToSkip,\n    numberToReturn: numberToReturn,\n    checkKeys: false,\n    returnFieldSelector: cmd.fields,\n    serializeFunctions: serializeFunctions,\n    ignoreUndefined: ignoreUndefined\n  }); // Set query flags\n\n  query.slaveOk = readPreference.slaveOk(); // Set up the option bits for wire protocol\n\n  if (typeof cmd.tailable == 'boolean') query.tailable = cmd.tailable;\n  if (typeof cmd.oplogReplay == 'boolean') query.oplogReplay = cmd.oplogReplay;\n  if (typeof cmd.noCursorTimeout == 'boolean') query.noCursorTimeout = cmd.noCursorTimeout;\n  if (typeof cmd.awaitData == 'boolean') query.awaitData = cmd.awaitData;\n  if (typeof cmd.partial == 'boolean') query.partial = cmd.partial; // Return the query\n\n  return query;\n}; //\n// Set up a command cursor\n\n\nvar setupCommand = function (bson, ns, cmd, cursorState, topology, options) {\n  // Set empty options object\n  options = options || {}; // Get the readPreference\n\n  var readPreference = getReadPreference(cmd, options); // Final query\n\n  var finalCmd = {};\n\n  for (var name in cmd) {\n    finalCmd[name] = cmd[name];\n  } // Build command namespace\n\n\n  var parts = ns.split(/\\./); // Throw on majority readConcern passed in\n\n  if (cmd.readConcern && cmd.readConcern.level != 'local') {\n    throw new MongoError(f('server %s command does not support a readConcern level of %s', JSON.stringify(cmd), cmd.readConcern.level));\n  } // Remove readConcern, ensure no failing commands\n\n\n  if (cmd.readConcern) delete cmd['readConcern']; // Serialize functions\n\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false; // Set up the serialize and ignoreUndefined fields\n\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false; // We have a Mongos topology, check if we need to add a readPreference\n\n  if (topology.type == 'mongos' && readPreference && readPreference.preference != 'primary') {\n    finalCmd = {\n      '$query': finalCmd,\n      '$readPreference': readPreference.toJSON()\n    };\n  } // Build Query object\n\n\n  var query = new Query(bson, f('%s.$cmd', parts.shift()), finalCmd, {\n    numberToSkip: 0,\n    numberToReturn: -1,\n    checkKeys: false,\n    serializeFunctions: serializeFunctions,\n    ignoreUndefined: ignoreUndefined\n  }); // Set query flags\n\n  query.slaveOk = readPreference.slaveOk(); // Return the query\n\n  return query;\n};\n/**\n * @ignore\n */\n\n\nvar bindToCurrentDomain = function (callback) {\n  var domain = process.domain;\n\n  if (domain == null || callback == null) {\n    return callback;\n  } else {\n    return domain.bind(callback);\n  }\n};\n\nvar hasWriteConcern = function (writeConcern) {\n  if (writeConcern.w || writeConcern.wtimeout || writeConcern.j == true || writeConcern.fsync == true || Object.keys(writeConcern).length == 0) {\n    return true;\n  }\n\n  return false;\n};\n\nvar cloneWriteConcern = function (writeConcern) {\n  var wc = {};\n  if (writeConcern.w != null) wc.w = writeConcern.w;\n  if (writeConcern.wtimeout != null) wc.wtimeout = writeConcern.wtimeout;\n  if (writeConcern.j != null) wc.j = writeConcern.j;\n  if (writeConcern.fsync != null) wc.fsync = writeConcern.fsync;\n  return wc;\n}; //\n// Aggregate up all the results\n//\n\n\nvar aggregateWriteOperationResults = function (opType, ops, results, connection) {\n  var finalResult = {\n    ok: 1,\n    n: 0\n  }; // Map all the results coming back\n\n  for (var i = 0; i < results.length; i++) {\n    var result = results[i];\n    var op = ops[i];\n\n    if ((result.upserted || result.updatedExisting == false) && finalResult.upserted == null) {\n      finalResult.upserted = [];\n    } // Push the upserted document to the list of upserted values\n\n\n    if (result.upserted) {\n      finalResult.upserted.push({\n        index: i,\n        _id: result.upserted\n      });\n    } // We have an upsert where we passed in a _id\n\n\n    if (result.updatedExisting == false && result.n == 1 && result.upserted == null) {\n      finalResult.upserted.push({\n        index: i,\n        _id: op.q._id\n      });\n    } // We have an insert command\n\n\n    if (result.ok == 1 && opType == 'insert' && result.err == null) {\n      finalResult.n = finalResult.n + 1;\n    } // We have a command error\n\n\n    if (result != null && result.ok == 0 || result.err || result.errmsg) {\n      if (result.ok == 0) finalResult.ok = 0;\n      finalResult.code = result.code;\n      finalResult.errmsg = result.errmsg || result.err || result.errMsg; // Check if we have a write error\n\n      if (result.code == 11000 || result.code == 11001 || result.code == 12582 || result.code == 16544 || result.code == 16538 || result.code == 16542 || result.code == 14 || result.code == 13511) {\n        if (finalResult.writeErrors == null) finalResult.writeErrors = [];\n        finalResult.writeErrors.push({\n          index: i,\n          code: result.code,\n          errmsg: result.errmsg || result.err || result.errMsg\n        });\n      } else {\n        finalResult.writeConcernError = {\n          code: result.code,\n          errmsg: result.errmsg || result.err || result.errMsg\n        };\n      }\n    } else if (typeof result.n == 'number') {\n      finalResult.n += result.n;\n    } else {\n      finalResult.n += 1;\n    } // Result as expected\n\n\n    if (result != null && result.lastOp) finalResult.lastOp = result.lastOp;\n  } // Return finalResult aggregated results\n\n\n  return new CommandResult(finalResult, connection);\n}; //\n// Execute all inserts in an ordered manner\n//\n\n\nvar executeOrdered = function (opType, command, ismaster, ns, bson, pool, callbacks, ops, options, callback) {\n  var _ops = ops.slice(0); // Bind to current domain\n\n\n  callback = bindToCurrentDomain(callback); // Collect all the getLastErrors\n\n  var getLastErrors = []; // Execute an operation\n\n  var executeOp = function (list, _callback) {\n    // No more items in the list\n    if (list.length == 0) {\n      return process.nextTick(function () {\n        _callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, null));\n      });\n    } // Get the first operation\n\n\n    var doc = list.shift(); // Create an insert command\n\n    var op = new command(Query.getRequestId(), ismaster, bson, ns, [doc], options); // Write concern\n\n    var optionWriteConcern = options.writeConcern || {\n      w: 1\n    }; // Final write concern\n\n    var writeConcern = cloneWriteConcern(optionWriteConcern); // Get the db name\n\n    var db = ns.split('.').shift();\n\n    try {\n      // Add binary message to list of commands to execute\n      var commands = [op.toBin()]; // If write concern 0 don't fire getLastError\n\n      if (hasWriteConcern(writeConcern)) {\n        var getLastErrorCmd = {\n          getlasterror: 1\n        }; // Merge all the fields\n\n        for (var i = 0; i < writeConcernFields.length; i++) {\n          if (writeConcern[writeConcernFields[i]] != null) {\n            getLastErrorCmd[writeConcernFields[i]] = writeConcern[writeConcernFields[i]];\n          }\n        } // Create a getLastError command\n\n\n        var getLastErrorOp = new Query(bson, f(\"%s.$cmd\", db), getLastErrorCmd, {\n          numberToReturn: -1\n        }); // Add getLastError command to list of ops to execute\n\n        commands.push(getLastErrorOp.toBin()); // getLastError callback\n\n        var getLastErrorCallback = function (err, result) {\n          if (err) return callback(err); // Get the document\n\n          var doc = result.documents[0]; // Save the getLastError document\n\n          getLastErrors.push(doc); // If we have an error terminate\n\n          if (doc.ok == 0 || doc.err || doc.errmsg) {\n            return callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, result.connection));\n          } // Execute the next op in the list\n\n\n          executeOp(list, callback);\n        }; // Register the callback\n\n\n        callbacks.register(getLastErrorOp.requestId, getLastErrorCallback); // Write both commands out at the same time\n\n        pool.write(commands, getLastErrorCallback);\n      } else {\n        // Write both commands out at the same time\n        pool.write(commands, callback, {\n          immediateRelease: true\n        });\n      }\n    } catch (err) {\n      if (typeof err == 'string') err = new MongoError(err); // We have a serialization error, rewrite as a write error to have same behavior as modern\n      // write commands\n\n      getLastErrors.push({\n        ok: 1,\n        errmsg: err.message,\n        code: 14\n      }); // Return due to an error\n\n      process.nextTick(function () {\n        callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, null));\n      });\n    }\n  }; // Execute the operations\n\n\n  executeOp(_ops, callback);\n};\n\nvar executeUnordered = function (opType, command, ismaster, ns, bson, pool, callbacks, ops, options, callback) {\n  // Bind to current domain\n  callback = bindToCurrentDomain(callback); // Total operations to write\n\n  var totalOps = ops.length; // Collect all the getLastErrors\n\n  var getLastErrors = []; // Write concern\n\n  var optionWriteConcern = options.writeConcern || {\n    w: 1\n  }; // Final write concern\n\n  var writeConcern = cloneWriteConcern(optionWriteConcern); // Driver level error\n\n  var error; // Execute all the operations\n\n  for (var i = 0; i < ops.length; i++) {\n    // Create an insert command\n    var op = new command(Query.getRequestId(), ismaster, bson, ns, [ops[i]], options); // Get db name\n\n    var db = ns.split('.').shift();\n\n    try {\n      // Add binary message to list of commands to execute\n      var commands = [op.toBin()]; // If write concern 0 don't fire getLastError\n\n      if (hasWriteConcern(writeConcern)) {\n        var getLastErrorCmd = {\n          getlasterror: 1\n        }; // Merge all the fields\n\n        for (var j = 0; j < writeConcernFields.length; j++) {\n          if (writeConcern[writeConcernFields[j]] != null) getLastErrorCmd[writeConcernFields[j]] = writeConcern[writeConcernFields[j]];\n        } // Create a getLastError command\n\n\n        var getLastErrorOp = new Query(bson, f(\"%s.$cmd\", db), getLastErrorCmd, {\n          numberToReturn: -1\n        }); // Add getLastError command to list of ops to execute\n\n        commands.push(getLastErrorOp.toBin()); // Give the result from getLastError the right index\n\n        var callbackOp = function (_index) {\n          return function (err, result) {\n            if (err) error = err; // Update the number of operations executed\n\n            totalOps = totalOps - 1; // Save the getLastError document\n\n            if (!err) getLastErrors[_index] = result.documents[0]; // Check if we are done\n\n            if (totalOps == 0) {\n              process.nextTick(function () {\n                if (error) return callback(error);\n                callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, result.connection));\n              });\n            }\n          };\n        }; // Register the callback\n\n\n        callbacks.register(getLastErrorOp.requestId, callbackOp(i)); // Write both commands out at the same time\n\n        pool.write(commands, callbackOp(i));\n      } else {\n        // Write both commands out at the same time\n        pool.write(commands, callback, {\n          immediateRelease: true\n        });\n      }\n    } catch (err) {\n      if (typeof err == 'string') err = new MongoError(err); // Update the number of operations executed\n\n      totalOps = totalOps - 1; // We have a serialization error, rewrite as a write error to have same behavior as modern\n      // write commands\n\n      getLastErrors[i] = {\n        ok: 1,\n        errmsg: err.message,\n        code: 14\n      }; // Check if we are done\n\n      if (totalOps == 0) {\n        callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, null));\n      }\n    }\n  } // Empty w:0 return\n\n\n  if (writeConcern && writeConcern.w == 0 && callback) {\n    callback(null, null);\n  }\n};\n\nmodule.exports = WireProtocol;","map":null,"metadata":{},"sourceType":"script"}