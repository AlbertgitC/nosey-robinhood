{"ast":null,"code":"'use strict';\n\nvar E = require('linq');\n\nvar ArrayIterator = require('./array');\n\nvar SelectIterator = require('./select'); //\n// An iterator that can step multiple other iterators at once.\n//\n\n\nvar SelectManyIterator = function (iterator, selector) {\n  var self = this;\n  self._expandIterator = new SelectIterator(iterator, selector);\n  self._childIterator = null;\n};\n\nSelectManyIterator.prototype.moveNext = function () {\n  var self = this;\n\n  if (!self._childIterator) {\n    if (!self._expandIterator.moveNext()) {\n      return false;\n    }\n\n    self._childIterator = self._expandIterator.getCurrent();\n\n    if (Object.isArray(self._childIterator)) {\n      self._childIterator = new ArrayIterator(self._childIterator);\n    }\n\n    return self._childIterator.moveNext();\n  } else {\n    if (self._childIterator.moveNext()) {\n      return true;\n    }\n\n    if (!self._expandIterator.moveNext()) {\n      return false;\n    }\n\n    self._childIterator = self._expandIterator.getCurrent();\n\n    if (Object.isArray(self._childIterator)) {\n      self._childIterator = new ArrayIterator(self._childIterator);\n    }\n\n    return self._childIterator.moveNext();\n  }\n};\n\nSelectManyIterator.prototype.getCurrent = function () {\n  var self = this;\n  return self._childIterator.getCurrent();\n}; //\n// Bake the iterator into an array.\n//\n\n\nSelectManyIterator.prototype.realize = function () {\n  var self = this;\n  var output = [];\n\n  while (self.moveNext()) {\n    output.push(self.getCurrent());\n  }\n\n  return output;\n};\n\nmodule.exports = SelectManyIterator;","map":null,"metadata":{},"sourceType":"script"}