{"ast":null,"code":"var Database = require('./dist/Database');\n\nvar Collection = require('./dist/Collection');\n\nvar mongodb = require('mongodb-core');\n\nvar coreJs = require('babel-runtime/core-js').default;\n\nvar ES2015Proxy = null;\n\nif (typeof Proxy !== 'undefined') {\n  ES2015Proxy = require('harmony-proxy');\n}\n\nfunction createDatabase(connectionString, options, collections) {\n  var db = new Database(connectionString, options, collections);\n  db.ObjectId = mongodb.BSON.ObjectId;\n  db.DBRef = mongodb.BSON.DBRef;\n  db.Timestamp = mongodb.BSON.Timestamp;\n  db.MinKey = mongodb.BSON.MinKey;\n  db.MaxKey = mongodb.BSON.MaxKey;\n  db.NumberLong = mongodb.BSON.Long;\n  var ret;\n\n  if (ES2015Proxy) {\n    ret = new ES2015Proxy(db, {\n      get: function (target, property) {\n        if (target[property]) {\n          return target[property];\n        } else {\n          return target[property] = target.collection(property);\n        }\n      }\n    });\n  } else {\n    ret = db;\n  }\n\n  return ret;\n}\n\nmodule.exports = createDatabase;\n\ncreateDatabase.compatible = function () {\n  coreJs.Promise.prototype.done = function (resolve, reject) {\n    this.then(function (result) {\n      try {\n        if (resolve) {\n          resolve(result);\n        }\n      } catch (err) {\n        process.nextTick(function () {\n          throw err;\n        });\n      }\n    }, function (err) {\n      if (reject) {\n        reject(err);\n      } else {\n        process.nextTick(function () {\n          throw err;\n        });\n      }\n    });\n  };\n\n  coreJs.Promise.prototype.fail = coreJs.Promise.prototype.catch;\n\n  coreJs.Promise.prototype.fin = coreJs.Promise.prototype.finally = function (callback) {\n    return this.then(callback, function (err) {\n      callback();\n      throw err;\n    });\n  };\n\n  var findAndModify = Collection.prototype.findAndModify;\n  Collection.prototype.findAndModifyEx = findAndModify;\n\n  Collection.prototype.findAndModify = function () {\n    return findAndModify.apply(this, Array.prototype.slice.call(arguments)).then(function (result) {\n      return result.result;\n    });\n  };\n\n  Database.prototype.db = Database.prototype.getSiblingDb;\n  return this;\n};\n\ncreateDatabase.ObjectId = mongodb.BSON.ObjectId;\ncreateDatabase.DBRef = mongodb.BSON.DBRef;\ncreateDatabase.Timestamp = mongodb.BSON.Timestamp;\ncreateDatabase.MinKey = mongodb.BSON.MinKey;\ncreateDatabase.MaxKey = mongodb.BSON.MaxKey;\ncreateDatabase.NumberLong = mongodb.BSON.Long;","map":null,"metadata":{},"sourceType":"script"}