{"ast":null,"code":"'use strict';\n\nvar _inherits = require('babel-runtime/helpers/inherits')['default'];\n\nvar _get = require('babel-runtime/helpers/get')['default'];\n\nvar _createClass = require('babel-runtime/helpers/create-class')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];\n\nvar _regeneratorRuntime = require('babel-runtime/regenerator')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\n_Object$defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nvar _readableStream = require('readable-stream');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar Cursor = function (_Readable) {\n  function Cursor(collection, namespace, command, options) {\n    _classCallCheck(this, Cursor);\n\n    _get(Object.getPrototypeOf(Cursor.prototype), 'constructor', this).call(this, {\n      objectMode: true,\n      highWaterMark: 0\n    });\n\n    this.db = collection.db;\n    this.collection = collection;\n    this.namespace = namespace;\n    this.command = command;\n    this.options = options;\n  }\n\n  _inherits(Cursor, _Readable);\n\n  _createClass(Cursor, [{\n    key: 'batchSize',\n    value: function batchSize(n) {\n      this.command.batchSize = n;\n      return this;\n    }\n  }, {\n    key: 'connect',\n    value: function connect() {\n      return _regeneratorRuntime.async(function connect$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            if (this._cursor) {\n              context$2$0.next = 4;\n              break;\n            }\n\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.db.connect());\n\n          case 3:\n            this._cursor = context$2$0.sent.cursor(this.namespace, this.command, this.options);\n\n          case 4:\n            return context$2$0.abrupt('return', this._cursor);\n\n          case 5:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'count',\n    value: function count() {\n      var result;\n      return _regeneratorRuntime.async(function count$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.collection.runCommand('count', {\n              query: this.command.query\n            }));\n\n          case 2:\n            result = context$2$0.sent;\n            return context$2$0.abrupt('return', result.n);\n\n          case 4:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      return _regeneratorRuntime.async(function destroy$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            if (this.cursor) {\n              cursor.close();\n            }\n\n          case 1:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'explain',\n    value: function explain() {\n      return _regeneratorRuntime.async(function explain$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            this.command.query = {\n              $query: this.command.query || {},\n              $explain: 1\n            };\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.next());\n\n          case 3:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 4:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'forEach',\n    value: function forEach(action) {\n      var item;\n      return _regeneratorRuntime.async(function forEach$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            item = null;\n\n          case 1:\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.next());\n\n          case 3:\n            if (!(item = context$2$0.sent)) {\n              context$2$0.next = 7;\n              break;\n            }\n\n            action(item);\n            context$2$0.next = 1;\n            break;\n\n          case 7:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'forEachAsync',\n    value: function forEachAsync(action) {\n      var item;\n      return _regeneratorRuntime.async(function forEachAsync$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            item = null;\n\n          case 1:\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.next());\n\n          case 3:\n            if (!(item = context$2$0.sent)) {\n              context$2$0.next = 8;\n              break;\n            }\n\n            context$2$0.next = 6;\n            return _regeneratorRuntime.awrap(action(item));\n\n          case 6:\n            context$2$0.next = 1;\n            break;\n\n          case 8:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'limit',\n    value: function limit(n) {\n      this.command.limit = n;\n      return this;\n    }\n  }, {\n    key: 'map',\n    value: function map(mapFunction) {\n      var result, item;\n      return _regeneratorRuntime.async(function map$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            result = [];\n            item = null;\n\n          case 2:\n            context$2$0.next = 4;\n            return _regeneratorRuntime.awrap(this.next());\n\n          case 4:\n            if (!(item = context$2$0.sent)) {\n              context$2$0.next = 8;\n              break;\n            }\n\n            result.push(mapFunction(item));\n            context$2$0.next = 2;\n            break;\n\n          case 8:\n            return context$2$0.abrupt('return', result);\n\n          case 9:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'next',\n    value: function next() {\n      var cursor;\n      return _regeneratorRuntime.async(function next$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.connect());\n\n          case 2:\n            cursor = context$2$0.sent;\n            context$2$0.next = 5;\n            return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {\n              cursor.next(function (error, result) {\n                if (error) {\n                  reject(error);\n                } else {\n                  resolve(result);\n                }\n              });\n            }));\n\n          case 5:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 6:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'rewind',\n    value: function rewind() {\n      var cursor;\n      return _regeneratorRuntime.async(function rewind$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.connect());\n\n          case 2:\n            cursor = context$2$0.sent;\n            cursor.rewind();\n\n          case 4:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'size',\n    value: function size() {\n      var options, result;\n      return _regeneratorRuntime.async(function size$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            options = _lodash2['default'].pick(this.command, ['query', 'limit', 'skip']);\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.collection.runCommand('count', options));\n\n          case 3:\n            result = context$2$0.sent;\n            return context$2$0.abrupt('return', result.n);\n\n          case 5:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'skip',\n    value: function skip(n) {\n      this.command.skip = n;\n      return this;\n    }\n  }, {\n    key: 'sort',\n    value: function sort(sortObject) {\n      this.command.sort = sortObject;\n      return this;\n    }\n  }, {\n    key: 'then',\n    value: function then() {\n      // allows awaiting collection.find() directly.\n      var promise = this.toArray();\n      return promise.then.apply(promise, Array.prototype.slice.call(arguments));\n    }\n  }, {\n    key: 'toArray',\n    value: function toArray() {\n      var result, item;\n      return _regeneratorRuntime.async(function toArray$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            result = [];\n            item = null;\n\n          case 2:\n            context$2$0.next = 4;\n            return _regeneratorRuntime.awrap(this.next());\n\n          case 4:\n            if (!(item = context$2$0.sent)) {\n              context$2$0.next = 8;\n              break;\n            }\n\n            result.push(item);\n            context$2$0.next = 2;\n            break;\n\n          case 8:\n            return context$2$0.abrupt('return', result);\n\n          case 9:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: '_read',\n    value: function _read() {\n      var self = this;\n      self.next().then(function (data) {\n        self.push(data);\n      }, function (error) {\n        self.emit('error', error);\n      });\n    }\n  }]);\n\n  return Cursor;\n}(_readableStream.Readable);\n\nexports['default'] = Cursor;\n;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}