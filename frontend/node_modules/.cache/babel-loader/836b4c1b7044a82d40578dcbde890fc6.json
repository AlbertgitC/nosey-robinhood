{"ast":null,"code":"'use strict';\n\nvar assert = require('chai').assert;\n\nvar E = require('linq');\n\nvar Series = require('./series.js');\n/*\r\n * Zip together multiple series or data-frames to create a new series or data-frame.\r\n * Preserves the index of the first series or dataframe.\r\n *\r\n * @param {array} input - Array of series to zip together.\r\n * @param {function} selector - Selector function that produces a new series based on the input series.\r\n */\n\n\nmodule.exports = function (input, selector, factory) {\n  assert.isArray(input, \"Expected 'input' parameter to zipSeries/DataFrames to be an array of Series or DataFrames.\");\n  assert.isFunction(selector, \"Expected 'selector' parameter to zipSeries/DataFrames to be a function.\");\n  assert.isFunction(factory, \"Expected 'factory' parameter to zipSeries/DataFrames to be a factory function.\");\n  var toZip = E.from(input).select(function (sequence) {\n    return sequence.toArray();\n  }).toArray();\n  var length = E.from(toZip).select(function (values) {\n    return values.length;\n  }).min();\n  var output = [];\n\n  for (var i = 0; i < length; ++i) {\n    var curElements = E.from(toZip).select(function (values) {\n      return values[i];\n    }).toArray();\n    output.push(selector(new Series({\n      values: curElements\n    })));\n  }\n\n  return factory({\n    index: input[0].getIndex().take(length),\n    values: output\n  });\n};","map":null,"metadata":{},"sourceType":"script"}