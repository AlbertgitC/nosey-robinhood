{"ast":null,"code":"/**\n * Module dependencies.\n * @ignore\n */\nvar BinaryParser = require('./binary_parser').BinaryParser;\n/**\n * Machine id.\n *\n * Create a random 3-byte value (i.e. unique for this\n * process). Other drivers use a md5 of the machine id here, but\n * that would mean an asyc call to gethostname, so we don't bother.\n * @ignore\n */\n\n\nvar MACHINE_ID = parseInt(Math.random() * 0xFFFFFF, 10); // Regular expression that checks for hex value\n\nvar checkForHexRegExp = new RegExp(\"^[0-9a-fA-F]{24}$\");\n/**\n* Create a new ObjectID instance\n*\n* @class\n* @param {(string|number)} id Can be a 24 byte hex string, 12 byte binary string or a Number.\n* @property {number} generationTime The generation time of this ObjectId instance\n* @return {ObjectID} instance of ObjectID.\n*/\n\nvar ObjectID = function ObjectID(id) {\n  if (!(this instanceof ObjectID)) return new ObjectID(id); // Duck-typing to support ObjectId from different npm packages\n\n  if (id instanceof ObjectID || id && id.toHexString) return id;\n  this._bsontype = 'ObjectID';\n  var __id = null;\n  var valid = ObjectID.isValid(id); // Throw an error if it's not a valid setup\n\n  if (!valid && id != null) {\n    throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n  } else if (valid && typeof id == 'string' && id.length == 24) {\n    return ObjectID.createFromHexString(id);\n  } else if (id == null || typeof id == 'number') {\n    // convert to 12 byte binary string\n    this.id = this.generate(id);\n  } else if (id != null && id.length === 12) {\n    // assume 12 byte string\n    this.id = id;\n  }\n\n  if (ObjectID.cacheHexString) this.__id = this.toHexString();\n}; // Allow usage of ObjectId as well as ObjectID\n\n\nvar ObjectId = ObjectID; // Precomputed hex table enables speedy hex string conversion\n\nvar hexTable = [];\n\nfor (var i = 0; i < 256; i++) {\n  hexTable[i] = (i <= 15 ? '0' : '') + i.toString(16);\n}\n/**\n* Return the ObjectID id as a 24 byte hex string representation\n*\n* @method\n* @return {string} return the 24 byte hex string representation.\n*/\n\n\nObjectID.prototype.toHexString = function () {\n  if (ObjectID.cacheHexString && this.__id) return this.__id;\n  var hexString = '';\n\n  for (var i = 0; i < this.id.length; i++) {\n    hexString += hexTable[this.id.charCodeAt(i)];\n  }\n\n  if (ObjectID.cacheHexString) this.__id = hexString;\n  return hexString;\n};\n/**\n* Update the ObjectID index used in generating new ObjectID's on the driver\n*\n* @method\n* @return {number} returns next index value.\n* @ignore\n*/\n\n\nObjectID.prototype.get_inc = function () {\n  return ObjectID.index = (ObjectID.index + 1) % 0xFFFFFF;\n};\n/**\n* Update the ObjectID index used in generating new ObjectID's on the driver\n*\n* @method\n* @return {number} returns next index value.\n* @ignore\n*/\n\n\nObjectID.prototype.getInc = function () {\n  return this.get_inc();\n};\n/**\n* Generate a 12 byte id string used in ObjectID's\n*\n* @method\n* @param {number} [time] optional parameter allowing to pass in a second based timestamp.\n* @return {string} return the 12 byte id binary string.\n*/\n\n\nObjectID.prototype.generate = function (time) {\n  if ('number' != typeof time) {\n    time = parseInt(Date.now() / 1000, 10);\n  }\n\n  var time4Bytes = BinaryParser.encodeInt(time, 32, true, true);\n  /* for time-based ObjectID the bytes following the time will be zeroed */\n\n  var machine3Bytes = BinaryParser.encodeInt(MACHINE_ID, 24, false);\n  var pid2Bytes = BinaryParser.fromShort((typeof process === 'undefined' ? Math.floor(Math.random() * 100000) : process.pid) % 0xFFFF);\n  var index3Bytes = BinaryParser.encodeInt(this.get_inc(), 24, false, true);\n  return time4Bytes + machine3Bytes + pid2Bytes + index3Bytes;\n};\n/**\n* Converts the id into a 24 byte hex string for printing\n*\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\n\n\nObjectID.prototype.toString = function () {\n  return this.toHexString();\n};\n/**\n* Converts to a string representation of this Id.\n*\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\n\n\nObjectID.prototype.inspect = ObjectID.prototype.toString;\n/**\n* Converts to its JSON representation.\n*\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\n\nObjectID.prototype.toJSON = function () {\n  return this.toHexString();\n};\n/**\n* Compares the equality of this ObjectID with `otherID`.\n*\n* @method\n* @param {object} otherID ObjectID instance to compare against.\n* @return {boolean} the result of comparing two ObjectID's\n*/\n\n\nObjectID.prototype.equals = function equals(otherID) {\n  var id;\n\n  if (otherID != null && (otherID instanceof ObjectID || otherID.toHexString)) {\n    id = otherID.id;\n  } else if (typeof otherID == 'string' && ObjectID.isValid(otherID)) {\n    id = ObjectID.createFromHexString(otherID).id;\n  } else {\n    return false;\n  }\n\n  return this.id === id;\n};\n/**\n* Returns the generation date (accurate up to the second) that this ID was generated.\n*\n* @method\n* @return {date} the generation date\n*/\n\n\nObjectID.prototype.getTimestamp = function () {\n  var timestamp = new Date();\n  timestamp.setTime(Math.floor(BinaryParser.decodeInt(this.id.substring(0, 4), 32, true, true)) * 1000);\n  return timestamp;\n};\n/**\n* @ignore\n*/\n\n\nObjectID.index = parseInt(Math.random() * 0xFFFFFF, 10);\n/**\n* @ignore\n*/\n\nObjectID.createPk = function createPk() {\n  return new ObjectID();\n};\n/**\n* Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n*\n* @method\n* @param {number} time an integer number representing a number of seconds.\n* @return {ObjectID} return the created ObjectID\n*/\n\n\nObjectID.createFromTime = function createFromTime(time) {\n  var id = BinaryParser.encodeInt(time, 32, true, true) + BinaryParser.encodeInt(0, 64, true, true);\n  return new ObjectID(id);\n};\n/**\n* Creates an ObjectID from a hex string representation of an ObjectID.\n*\n* @method\n* @param {string} hexString create a ObjectID from a passed in 24 byte hexstring.\n* @return {ObjectID} return the created ObjectID\n*/\n\n\nObjectID.createFromHexString = function createFromHexString(hexString) {\n  // Throw an error if it's not a valid setup\n  if (typeof hexString === 'undefined' || hexString != null && hexString.length != 24) throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n  var len = hexString.length;\n\n  if (len > 12 * 2) {\n    throw new Error('Id cannot be longer than 12 bytes');\n  }\n\n  var result = '',\n      string,\n      number;\n\n  for (var index = 0; index < len; index += 2) {\n    string = hexString.substr(index, 2);\n    number = parseInt(string, 16);\n    result += BinaryParser.fromByte(number);\n  }\n\n  return new ObjectID(result, hexString);\n};\n/**\n* Checks if a value is a valid bson ObjectId\n*\n* @method\n* @return {boolean} return true if the value is a valid bson ObjectId, return false otherwise.\n*/\n\n\nObjectID.isValid = function isValid(id) {\n  if (id == null) return false;\n  if (typeof id == 'number') return true;\n\n  if (typeof id == 'string') {\n    return id.length == 12 || id.length == 24 && checkForHexRegExp.test(id);\n  }\n\n  if (id instanceof ObjectID) {\n    return true;\n  } // Duck-Typing detection of ObjectId like objects\n\n\n  if (id.toHexString) {\n    return id.id.length == 12 || id.id.length == 24 && checkForHexRegExp.test(id.id);\n  }\n\n  return false;\n};\n/**\n* @ignore\n*/\n\n\nObject.defineProperty(ObjectID.prototype, \"generationTime\", {\n  enumerable: true,\n  get: function () {\n    return Math.floor(BinaryParser.decodeInt(this.id.substring(0, 4), 32, true, true));\n  },\n  set: function (value) {\n    var value = BinaryParser.encodeInt(value, 32, true, true);\n    this.id = value + this.id.substr(4); // delete this.__id;\n\n    this.toHexString();\n  }\n});\n/**\n * Expose.\n */\n\nmodule.exports = ObjectID;\nmodule.exports.ObjectID = ObjectID;\nmodule.exports.ObjectId = ObjectID;","map":null,"metadata":{},"sourceType":"script"}