{"ast":null,"code":"'use strict';\n\nvar SelectManyIterable = function (iterable, selector) {\n  var self = this;\n  self._iterable = iterable;\n  self._selector = selector;\n};\n\nmodule.exports = SelectManyIterable;\n\nvar SelectManyIterator = require('../iterators/select-many');\n\nvar Series = require('../series');\n\nvar DataFrame = require('../dataframe');\n\nSelectManyIterable.prototype.getIterator = function () {\n  var self = this;\n  return new SelectManyIterator(self._iterable.getIterator(), function (pair) {\n    var newValues = self._selector(pair[1]);\n\n    if (!Object.isArray(newValues) && !(newValues instanceof Series) && !(newValues instanceof DataFrame)) {\n      throw new Error(\"Expected return value from 'Series.selectMany' selector to be an array, a Series or a DataFrame, each item in the data sequence represents a new value in the resulting series.\");\n    }\n\n    if (newValues instanceof Series) {\n      newValues = newValues.toArray();\n    }\n\n    var newPairs = [];\n\n    for (var newValueIndex = 0; newValueIndex < newValues.length; ++newValueIndex) {\n      newPairs.push([pair[0], newValues[newValueIndex]]);\n    }\n\n    return newPairs;\n  });\n};\n\nSelectManyIterable.prototype.getColumnNames = function () {\n  var self = this; // Have to get the first element to get field names.\n\n  var iterator = self._iterable.getIterator();\n\n  for (;;) {\n    // Keep going until we find a non-empty list.\n    if (!iterator.moveNext()) {\n      return [];\n    }\n\n    var result = self._selector(iterator.getCurrent()[1]);\n\n    if (result.length > 0) {\n      return Object.keys(result[0]);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}