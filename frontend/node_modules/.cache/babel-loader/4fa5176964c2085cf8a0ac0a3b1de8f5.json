{"ast":null,"code":"\"use strict\"; //\n// API for downloading data from Alpha Vantage.\n//\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [0, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar request = require(\"request-promise\");\n\nvar dataForge = require('data-forge');\n\nvar DailyBar =\n/** @class */\nfunction () {\n  function DailyBar() {}\n\n  return DailyBar;\n}();\n\nexports.DailyBar = DailyBar;\n\nvar IntradayBar =\n/** @class */\nfunction () {\n  function IntradayBar() {}\n\n  return IntradayBar;\n}();\n\nexports.IntradayBar = IntradayBar;\n\nvar AlphaVantageAPI =\n/** @class */\nfunction () {\n  function AlphaVantageAPI(apiKey, outputDataSize, verbose) {\n    this.baseUrl = \"https://www.alphavantage.co\";\n    this.apiKey = apiKey;\n    this.outputDataSize = outputDataSize;\n    this.verbose = verbose !== undefined ? verbose : false;\n  } //\n  // Retreive stock data from Alpha Vantage.\n  //\n\n\n  AlphaVantageAPI.prototype.getDailyDataFrame = function (symbol) {\n    return __awaiter(this, void 0, void 0, function () {\n      var url, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            url = this.baseUrl + \"/query\" + \"?function=TIME_SERIES_DAILY_ADJUSTED\" + \"&symbol=\" + symbol + \"&apikey=\" + this.apiKey + \"&datatype=csv\" + \"&outputsize=\" + this.outputDataSize;\n\n            if (this.verbose) {\n              console.log('<< ' + url);\n            }\n\n            return [4\n            /*yield*/\n            , request(url)];\n\n          case 1:\n            response = _a.sent();\n\n            if (response.indexOf(\"Error Message\") >= 0) {\n              throw new Error(JSON.parse(response)[\"Error Message\"]);\n            }\n\n            return [2\n            /*return*/\n            , dataForge.fromCSV(response, {\n              skipEmptyLines: true\n            }).parseDates(\"timestamp\", \"YYYY-MM-DD\").parseFloats([\"open\", \"high\", \"low\", \"close\", \"adjusted_close\", \"volume\", \"dividend_amount\", \"split_coefficient\"]).renameSeries({\n              timestamp: \"Timestamp\",\n              open: \"Open\",\n              high: \"High\",\n              low: \"Low\",\n              close: \"Close\",\n              adjusted_close: \"AdjClose\",\n              volume: \"Volume\",\n              dividend_amount: \"DividendAmount\",\n              split_coefficient: \"SplitCoefficient\"\n            }).bake()];\n        }\n      });\n    });\n  }; //\n  // Retreive stock data from Alpha Vantage.\n  //\n\n\n  AlphaVantageAPI.prototype.getDailyData = function (symbol) {\n    return __awaiter(this, void 0, void 0, function () {\n      var bars;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getDailyDataFrame(symbol)];\n\n          case 1:\n            bars = _a.sent().toArray();\n            return [2\n            /*return*/\n            , bars];\n        }\n      });\n    });\n  }; //\n  // Retreive stock data from Alpha Vantage.\n  //\n\n\n  AlphaVantageAPI.prototype.getIntradayDataFrame = function (symbol, interval) {\n    return __awaiter(this, void 0, void 0, function () {\n      var url, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            url = this.baseUrl + \"/query\" + \"?function=TIME_SERIES_INTRADAY\" + \"&symbol=\" + symbol + \"&apikey=\" + this.apiKey + \"&datatype=csv\" + \"&outputsize=\" + this.outputDataSize + \"&interval=\" + interval;\n\n            if (this.verbose) {\n              console.log('<< ' + url);\n            }\n\n            return [4\n            /*yield*/\n            , request(url)];\n\n          case 1:\n            response = _a.sent();\n\n            if (response.indexOf(\"Error Message\") >= 0) {\n              throw new Error(JSON.parse(response)[\"Error Message\"]);\n            }\n\n            return [2\n            /*return*/\n            , dataForge.fromCSV(response, {\n              skipEmptyLines: true\n            }).parseDates(\"timestamp\", \"YYYY-MM-DD HH:mm:ss\").parseFloats([\"open\", \"high\", \"low\", \"close\", \"volume\"]).renameSeries({\n              timestamp: \"Timestamp\",\n              open: \"Open\",\n              high: \"High\",\n              low: \"Low\",\n              close: \"Close\",\n              volume: \"Volume\"\n            }).bake()];\n        }\n      });\n    });\n  }; //\n  // Retreive stock data from Alpha Vantage.\n  //\n\n\n  AlphaVantageAPI.prototype.getIntradayData = function (symbol, interval) {\n    return __awaiter(this, void 0, void 0, function () {\n      var bars;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getIntradayDataFrame(symbol, interval)];\n\n          case 1:\n            bars = _a.sent().toArray();\n            return [2\n            /*return*/\n            , bars];\n        }\n      });\n    });\n  };\n\n  return AlphaVantageAPI;\n}();\n\nexports.AlphaVantageAPI = AlphaVantageAPI;\n;","map":null,"metadata":{},"sourceType":"script"}