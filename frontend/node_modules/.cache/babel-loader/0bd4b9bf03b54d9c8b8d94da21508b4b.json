{"ast":null,"code":"var global = require('./$.global'),\n    macrotask = require('./$.task').set,\n    Observer = global.MutationObserver || global.WebKitMutationObserver,\n    process = global.process,\n    Promise = global.Promise,\n    isNode = require('./$.cof')(process) == 'process',\n    head,\n    last,\n    notify;\n\nvar flush = function () {\n  var parent, domain, fn;\n\n  if (isNode && (parent = process.domain)) {\n    process.domain = null;\n    parent.exit();\n  }\n\n  while (head) {\n    domain = head.domain;\n    fn = head.fn;\n    if (domain) domain.enter();\n    fn(); // <- currently we use it only for Promise - try / catch not required\n\n    if (domain) domain.exit();\n    head = head.next;\n  }\n\n  last = undefined;\n  if (parent) parent.enter();\n}; // Node.js\n\n\nif (isNode) {\n  notify = function () {\n    process.nextTick(flush);\n  }; // browsers with MutationObserver\n\n} else if (Observer) {\n  var toggle = 1,\n      node = document.createTextNode('');\n  new Observer(flush).observe(node, {\n    characterData: true\n  }); // eslint-disable-line no-new\n\n  notify = function () {\n    node.data = toggle = -toggle;\n  }; // environments with maybe non-completely correct, but existent Promise\n\n} else if (Promise && Promise.resolve) {\n  notify = function () {\n    Promise.resolve().then(flush);\n  }; // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n\n} else {\n  notify = function () {\n    // strange IE + webpack dev server bug - use .call(global)\n    macrotask.call(global, flush);\n  };\n}\n\nmodule.exports = function asap(fn) {\n  var task = {\n    fn: fn,\n    next: undefined,\n    domain: isNode && process.domain\n  };\n  if (last) last.next = task;\n\n  if (!head) {\n    head = task;\n    notify();\n  }\n\n  last = task;\n};","map":null,"metadata":{},"sourceType":"script"}