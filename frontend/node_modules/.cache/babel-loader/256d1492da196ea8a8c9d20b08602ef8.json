{"ast":null,"code":"'use strict'; //\n// Iterator that takes elements while the predicate returns true.\n//\n\nvar TakeWhileIterator = function (iterator, predicate) {\n  var self = this;\n  self._taking = true;\n  self._iterator = iterator;\n  self._predicate = predicate;\n};\n\nmodule.exports = TakeWhileIterator;\n\nTakeWhileIterator.prototype.moveNext = function () {\n  var self = this;\n\n  if (!self._taking) {\n    return false;\n  }\n\n  if (!self._iterator.moveNext()) {\n    return false;\n  }\n\n  if (!self._predicate(self._iterator.getCurrent())) {\n    self._taking = false;\n    return false;\n  }\n\n  return true;\n};\n\nTakeWhileIterator.prototype.getCurrent = function () {\n  var self = this;\n  return self._iterator.getCurrent();\n};","map":null,"metadata":{},"sourceType":"script"}