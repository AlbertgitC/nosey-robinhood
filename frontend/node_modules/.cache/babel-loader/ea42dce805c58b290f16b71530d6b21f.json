{"ast":null,"code":"'use strict';\n\nvar assert = require('chai').assert;\n\nvar E = require('linq');\n\nvar DataFrame = require('./dataframe');\n\nvar MultiIterator = require('./iterators/multi');\n\nvar ConcatIterator = require('./iterators/concat');\n\nvar SelectIterator = require('./iterators/select');\n\nvar extend = require('extend');\n/**\r\n * Concatenate multiple dataframes into a single dataframe.\r\n *\r\n * @param {array} dataFrames - Array of data frames to concatenate.\r\n */\n\n\nmodule.exports = function (dataFrames, options) {\n  assert.isArray(dataFrames, \"Expected 'dataFrames' parameter to 'dataForge.concat' to be an array of data frames.\");\n\n  if (options) {\n    assert.isObject(options, \"Expected 'options' parameter to 'dataForge.concat' to be an object with config options.\");\n  }\n\n  if (options && options.axis === 1) {\n    var columnNames = E.from(dataFrames).selectMany(function (dataFrame) {\n      return dataFrame.getColumnNames();\n    }).toArray();\n    var rows = E.from(dataFrames).select(function (dataFrame) {\n      return dataFrame.toRows();\n    }).toArray();\n    var concatenatedRows = E.from(rows).aggregate(function (prev, cur) {\n      return E.from(prev).zip(cur, function (p, c) {\n        return p.concat(c);\n      }).toArray();\n    });\n    return new DataFrame({\n      columnNames: columnNames,\n      values: concatenatedRows\n    });\n  } else {\n    var concatenatedColumnsNames = E.from(dataFrames).selectMany(function (dataFrame) {\n      return dataFrame.getColumnNames();\n    }).distinct().toArray();\n    return new DataFrame({\n      iterable: {\n        getIterator: function () {\n          var iterators = E.from(dataFrames).select(function (dataFrame) {\n            return dataFrame.reorderSeries(concatenatedColumnsNames);\n          }).select(function (dataFrame) {\n            return dataFrame.getIterator();\n          }).toArray();\n          return new ConcatIterator(iterators);\n        },\n        getColumnNames: function () {\n          return concatenatedColumnsNames;\n        }\n      }\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}